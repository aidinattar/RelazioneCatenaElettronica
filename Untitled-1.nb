(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    380305,       8116]
NotebookOptionsPosition[    376048,       8045]
NotebookOutlinePosition[    376391,       8060]
CellTagsIndexPosition[    376348,       8057]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["laplace inverse transform V/s", "WolframAlphaLong",
 CellChangeTimes->{{3.7859269830683193`*^9, 3.7859269943332496`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"9b6b1c78-70d9-45fd-84df-f1c6c6584119"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "laplace inverse transform V/s", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"InverseLaplaceTransform[V/s, s, t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 SubsuperscriptBox["\[ScriptCapitalL]", "s", 
                  RowBox[{"-", "1"}]], "[", 
                 FractionBox["V", "s"], "]"}], 
               RowBox[{"(", "t", ")"}]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> 
         "\[ScriptCapitalL]_s^(-1)[f(s)](t) is the inverse Laplace transform \
of f(s) with positive real variable t"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/InverseLaplaceTransform.\
html", "text" -> "Documentation", "title" -> "Mathematica"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "LaplaceTransform", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"InverseLaplaceTransform[V/s, s, t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["V", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[V HeavisideTheta[V], {V, 0, 1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5416$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5415$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5415$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5416$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2185405$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5415$\
2185410$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5416$2185411$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5416$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5415$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2185405$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5415$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5415$\
2185410$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5416$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5416$\
2185411$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$2185381[
                    Plot[{
                    Re[$CellContext`V HeavisideTheta[$CellContext`V]], 
                    Im[$CellContext`V HeavisideTheta[$CellContext`V]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][$CellContext`V 
                    HeavisideTheta[$CellContext`V], {$CellContext`V, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5415$$], 
                    (
                    Piecewise[{{
                    0.5 + 0.5345224838248487 Tan[1.5040801783846716` #], # < 
                    0}}, 0.5 + 
                    0.5345224838248487 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5415$$], 
                    0], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5415$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5416$$]], 
                    (
                    Piecewise[{{
                    0.5 + 0.5345224838248487 Tan[1.5040801783846716` #], # < 
                    0}}, 0.5 + 
                    0.5345224838248487 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5415$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5416$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5415$$ + 
                    0.001, CalculateUtilities`GraphicsUtilities`Private`\
max5416$$]], 1.]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["V", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["V", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5415$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5416$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2185381]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2185381[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2185381[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtI1J8AEJ6GBMGlCS8r232GksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu96TIxml/\
V6vp69a80Fykt7A02NrhnKWy0KQd6e5olozKdIr+Oy2NTE1e5TDD0q877o176WagfHnV/g+\
8KTgYOhXwzgzjOrJvoI8Y4muPSPFju1PJlwmwNlP+\
nR768XuzstdD4OxjMAYqoTeaQuZZwo0TXsIdM2atxzEN398VB4/FZzH9HtBRUL1A+sdKyAWRgrgmE/\
wrZebqbuYmAFBQJELp8nJc9j2Am0UE9MxneX4xvlkbbUFBjXVnpt7JTfrFOTDv4kPZOxi8h6XtDs7A\
sPCuGT0nZXVP+dugOfXbeGVPFlNHOb3hiNvYNgx1ct0PmtdJ89I1bUu+jlXFzVfNhrk+VOm/\
l86ZNosh7HdNgw6O7I1Xq29ZfjnbeFljl0/F/\
d9az57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMe5UfMfoDKlghRPZOMt+\
cf3xsAKvN4UYazfZgHREPQMimlPrIo7bPTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyhOUgX6g4myb78UXEruZxpMuT9QBg6pWqt6G9hfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0rVJfyLA5caU7Dk+\
iXBT6kYmqy5o4dOLqC2xazieRJrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6Db91uKY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[V HeavisideTheta[V], {V, 0, 6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5418$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5417$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5417$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5418$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2185501$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5417$\
2185502$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5418$2185503$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5418$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5417$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2185501$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5417$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5417$\
2185502$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5418$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5418$\
2185503$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$2185479[
                    Plot[{
                    Re[$CellContext`V HeavisideTheta[$CellContext`V]], 
                    Im[$CellContext`V HeavisideTheta[$CellContext`V]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][$CellContext`V 
                    HeavisideTheta[$CellContext`V], {$CellContext`V, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5417$$], 
                    (
                    Piecewise[{{
                    3. + 3.2071349029490923` Tan[1.5040801783846716` #], # < 
                    0}}, 3. + 
                    3.2071349029490923` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5417$$], 
                    0], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5417$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5418$$]], 
                    (
                    Piecewise[{{
                    3. + 3.2071349029490923` Tan[1.5040801783846716` #], # < 
                    0}}, 3. + 
                    3.2071349029490923` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5417$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5418$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5417$$ + 
                    0.006, CalculateUtilities`GraphicsUtilities`Private`\
max5418$$]], 6.]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["V", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["V", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5417$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5418$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2185479]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2185479[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2185479[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkTqGBB+\
QGN0YkwaUpHzvLXESC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FgESb/\
X66nrxnwQLE628PTEmJGY5aLg8f5ZLolSVPDkGj67Y0xI9B5h8IPEznfTmPdCzkC78xt8H1hUMNDkq\
6aMakrU9EBCntFI1Z6xpCfmJ1MmImD0J3m2PXz1cuf10MFgLGPQmkiuXrSFzDMJiiQ9BLphzDsG/\
Js7Pi6PnwrGQvK9IDwi6qHxTiTEBkZwYJiP961Xm6l7mJgGHoOML50mK89R2wuUlpSnEzLL8Y2LyRq\
2BQaZKsfN/ZKbdQpy4d/CByK0MTmPTdqeLYF+YVwx+\
s7L6p9zN8Dz27bwUpyuJg7z22XIG2h6QtQync9b18kxUnWtjX7O1WXNl40GefGUqf+\
XjqjSy2Fstw2DzI5NjVdrbxl+py28yLHr5+J+\
YMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIy7Fd8hOn0qWOEEJs6yX2x/\
PKrA600hxNpNNyAdXs+AgOTEuGLL7R5NqR5lICEywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwmC3UHHWVf/qi4lVzONRnyfsg1SYlcK/\
rbWB9pyOXxRHhGEuIFTb16c1glNQbpLftBCRLmwClC0l/mY7+5h4uVQKoOJKpLOhYHtjRn/\
kn0ywIfEZ7qrLlje44u77bFbAJxWqsuoEmyOG02x3S/yXTjhuZA9yXBtyT+\
A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgNSLbiO"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "2DMathPlot"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "2DMathPlot"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "MultiClash", "word" -> "", "template" -> 
        "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}. Use \"${word3}\" as ${desc3}.", "count" -> "3"}, {
        XMLElement[
        "value", {
         "name" -> "Variable", "word" -> "V", "desc" -> "a variable", "input" -> 
          "*MC.V%2Fs-_*Variable-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "RomanNumeral", "word" -> "V", "desc" -> "a roman numeral",
           "input" -> "*MC.V%2Fs-_*RomanNumeral-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Unit", "word" -> "V/s", "desc" -> "a unit", "input" -> 
          "*MC.V%2Fs-_*Unit-"}, {}]}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.628", 
    "parsetiming" -> "0.373", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP2621741fc049a8gic9000005ad05aaa4f1d81e9", "host" -> 
    "https://www4d.wolframalpha.com", "server" -> "29", "related" -> 
    "https://www4d.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa2631741fc049a8gic90000011cdeahhc1869h5f4427725388962737750", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2019, 12, 21, 15, 23, 15.8212571`8.951815936252085}, "Line" -> 
    1, "SessionID" -> 33550833293597817403}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "laplace inverse transform V/s"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{690., {387., 393.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.785926995834228*^9},ExpressionUUID->"084b8b2d-b7fd-4c99-9dcc-\
71fde709efa9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InverseLaplaceTransform", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"R", "/", "r"}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"1", "/", 
      RowBox[{"(", 
       RowBox[{"1", " ", "+", " ", 
        RowBox[{"s", "*", "T"}]}], ")"}]}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"1", "/", 
      RowBox[{"(", 
       RowBox[{"1", " ", "+", " ", 
        RowBox[{"s", "*", "Y"}]}], ")"}]}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"a", " ", "+", " ", 
        RowBox[{"b", "*", "Y", "*", "s"}]}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{"a", " ", "+", " ", "b", " ", "+", " ", 
        RowBox[{"b", "*", "Y", "*", "s"}]}], ")"}]}], ")"}], "*", "A", "*", 
    RowBox[{"(", 
     RowBox[{"V", "/", "s"}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"1", " ", "-", " ", 
      RowBox[{"exp", 
       RowBox[{"(", 
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{"q", "*", "s"}], ")"}]}], ")"}]}]}], ")"}]}], ",", " ", "s",
    ",", " ", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.7859271145396786`*^9, 
  3.785927153051733*^9}},ExpressionUUID->"7c491bd0-08e3-4886-8a13-\
d1308593b7c6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"A", " ", "R", " ", "V", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox["t", "T"]}]], " ", "T"}], "-", 
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox["t", "Y"]}]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
         RowBox[{"b", " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox[
             RowBox[{
              RowBox[{"(", 
               RowBox[{"a", "+", "b"}], ")"}], " ", "t"}], 
             RowBox[{"b", " ", "Y"}]]}]], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "-", 
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox["t", "T"]}]], " ", 
          SuperscriptBox["T", "2"]}], "-", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox["t", "Y"]}]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "+", 
         RowBox[{
          SuperscriptBox["b", "2"], " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox[
             RowBox[{
              RowBox[{"(", 
               RowBox[{"a", "+", "b"}], ")"}], " ", "t"}], 
             RowBox[{"b", " ", "Y"}]]}]], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", "Y"}]}], ")"}]}], "-", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{"q", "-", "t"}], "T"]], " ", "T"}], "-", 
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{"q", "-", "t"}], "Y"]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
         RowBox[{"b", " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{
             RowBox[{"(", 
              RowBox[{"a", "+", "b"}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}]}], 
            RowBox[{"b", " ", "Y"}]]], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y", " ", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{
         RowBox[{"-", "q"}], "+", "t"}], "]"}]}], "+", 
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{"q", "-", "t"}], "T"]], " ", 
          SuperscriptBox["T", "2"]}], "-", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{"q", "-", "t"}], "Y"]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "+", 
         RowBox[{
          SuperscriptBox["b", "2"], " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{
             RowBox[{"(", 
              RowBox[{"a", "+", "b"}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}]}], 
            RowBox[{"b", " ", "Y"}]]], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", "Y"}]}], ")"}], " ", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{
         RowBox[{"-", "q"}], "+", "t"}], "]"}]}]}], ")"}]}], ")"}], "/", 
  RowBox[{"(", 
   RowBox[{"a", " ", 
    RowBox[{"(", 
     RowBox[{"a", "+", "b"}], ")"}], " ", "r", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"a", " ", "T"}], "+", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"T", "-", "Y"}], ")"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.785927029151606*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"28db43fa-98c5-446d-ba1c-919120a7bcfc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpToTrig", "[", "%2", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[4]:=",ExpressionUUID->"70b4a6da-9131-4a4c-ac59-1de3876cc7c6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"A", " ", "R", " ", "V", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "b"}], " ", 
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}], " ", "Y", " ", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{
         RowBox[{"-", "q"}], "+", "t"}], "]"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", "T", " ", 
          RowBox[{"Cosh", "[", 
           RowBox[{
            FractionBox["q", "T"], "-", 
            FractionBox["t", "T"]}], "]"}]}], "+", 
         RowBox[{"a", " ", "T", " ", 
          RowBox[{"Sinh", "[", 
           RowBox[{
            FractionBox["q", "T"], "-", 
            FractionBox["t", "T"]}], "]"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", "T"}], "-", 
            RowBox[{"b", " ", "Y"}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cosh", "[", 
             RowBox[{
              FractionBox["q", "Y"], "-", 
              FractionBox["t", "Y"]}], "]"}], "+", 
            RowBox[{"Sinh", "[", 
             RowBox[{
              FractionBox["q", "Y"], "-", 
              FractionBox["t", "Y"]}], "]"}]}], ")"}]}], "+", 
         RowBox[{"b", " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cosh", "[", 
             FractionBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a", "+", "b"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}]}], 
              RowBox[{"b", " ", "Y"}]], "]"}], "+", 
            RowBox[{"Sinh", "[", 
             FractionBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a", "+", "b"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}]}], 
              RowBox[{"b", " ", "Y"}]], "]"}]}], ")"}]}]}], ")"}]}], "+", 
      RowBox[{"a", " ", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{
         RowBox[{"-", "q"}], "+", "t"}], "]"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "a"}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", "T"}], "-", 
            RowBox[{"b", " ", "Y"}]}], ")"}]}], "+", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["T", "2"], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cosh", "[", 
             RowBox[{
              FractionBox["q", "T"], "-", 
              FractionBox["t", "T"]}], "]"}], "+", 
            RowBox[{"Sinh", "[", 
             RowBox[{
              FractionBox["q", "T"], "-", 
              FractionBox["t", "T"]}], "]"}]}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", "Y", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", "T"}], "-", 
            RowBox[{"b", " ", "Y"}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cosh", "[", 
             RowBox[{
              FractionBox["q", "Y"], "-", 
              FractionBox["t", "Y"]}], "]"}], "+", 
            RowBox[{"Sinh", "[", 
             RowBox[{
              FractionBox["q", "Y"], "-", 
              FractionBox["t", "Y"]}], "]"}]}], ")"}]}], "+", 
         RowBox[{
          SuperscriptBox["b", "2"], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", "Y", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cosh", "[", 
             FractionBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a", "+", "b"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}]}], 
              RowBox[{"b", " ", "Y"}]], "]"}], "+", 
            RowBox[{"Sinh", "[", 
             FractionBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a", "+", "b"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}]}], 
              RowBox[{"b", " ", "Y"}]], "]"}]}], ")"}]}]}], ")"}]}], "+", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}], " ", "Y", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", "T", " ", 
          RowBox[{"Cosh", "[", 
           FractionBox["t", "T"], "]"}]}], "-", 
         RowBox[{"a", " ", "T", " ", 
          RowBox[{"Sinh", "[", 
           FractionBox["t", "T"], "]"}]}], "+", 
         RowBox[{"b", " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cosh", "[", 
             RowBox[{
              FractionBox["t", "Y"], "+", 
              FractionBox[
               RowBox[{"a", " ", "t"}], 
               RowBox[{"b", " ", "Y"}]]}], "]"}], "-", 
            RowBox[{"Sinh", "[", 
             RowBox[{
              FractionBox["t", "Y"], "+", 
              FractionBox[
               RowBox[{"a", " ", "t"}], 
               RowBox[{"b", " ", "Y"}]]}], "]"}]}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", "T"}], "-", 
            RowBox[{"b", " ", "Y"}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cosh", "[", 
             FractionBox["t", "Y"], "]"}], "-", 
            RowBox[{"Sinh", "[", 
             FractionBox["t", "Y"], "]"}]}], ")"}]}]}], ")"}]}], "-", 
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "a"}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", "T"}], "-", 
            RowBox[{"b", " ", "Y"}]}], ")"}]}], "+", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["T", "2"], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cosh", "[", 
             FractionBox["t", "T"], "]"}], "-", 
            RowBox[{"Sinh", "[", 
             FractionBox["t", "T"], "]"}]}], ")"}]}], "+", 
         RowBox[{
          SuperscriptBox["b", "2"], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", "Y", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cosh", "[", 
             RowBox[{
              FractionBox["t", "Y"], "+", 
              FractionBox[
               RowBox[{"a", " ", "t"}], 
               RowBox[{"b", " ", "Y"}]]}], "]"}], "-", 
            RowBox[{"Sinh", "[", 
             RowBox[{
              FractionBox["t", "Y"], "+", 
              FractionBox[
               RowBox[{"a", " ", "t"}], 
               RowBox[{"b", " ", "Y"}]]}], "]"}]}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", "Y", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", "T"}], "-", 
            RowBox[{"b", " ", "Y"}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Cosh", "[", 
             FractionBox["t", "Y"], "]"}], "-", 
            RowBox[{"Sinh", "[", 
             FractionBox["t", "Y"], "]"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
   ")"}], "/", 
  RowBox[{"(", 
   RowBox[{"a", " ", 
    RowBox[{"(", 
     RowBox[{"a", "+", "b"}], ")"}], " ", "r", " ", 
    RowBox[{"(", 
     RowBox[{"T", "-", "Y"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"a", " ", "T"}], "+", 
      RowBox[{"b", " ", "T"}], "-", 
      RowBox[{"b", " ", "Y"}]}], ")"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.7859272538684845`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"f2799161-0c87-4a49-9551-84acd979f3bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "plot y = 2 x", Typeset`newq$$ = 
   "plot y = 2 x", Typeset`chosen$$ = "Plot[2*x, {x, -1, 1}]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse["plot y = 2 x", 
               Defer[
                Plot[2 Global`x, {Global`x, -1, 1}]], "Fast parse"]; 
             Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "plot y = 2 x", 
                  Defer[
                   Plot[2 Global`x, {Global`x, -1, 1}]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"2", "*", "x"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Plot", "[", 
                  RowBox[{
                   RowBox[{"2", "*", "x"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse[
                  "plot y = 2 x", 
                   Defer[
                    Plot[2 Global`x, {Global`x, -1, 1}]], "Fast parse"]; 
                 Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "plot y = 2 x", 
                    Defer[
                    Plot[2 Global`x, {Global`x, -1, 1}]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Plot", "[", 
                    RowBox[{
                    RowBox[{"2", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[5]:=",ExpressionUUID->"c5d31147-6682-46a4-89ba-210c3afcc7cc"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwt1PtP02cYhnGEERUnghENm8UBSjwQIzhLpjMPcWpExUijAeMBivEQ0OHI
FAiJU8ciLhjNxIQ5NSYFFTVFPBEUeAQlRYNRDlK0DG1LuwL2+3Je22HfbfH+
4crnP7jC07M0e3x9fHwS/+t/F9PMPikFf1Jyljuy0O0RUPLtuzFRw6MCSo6d
n5hu7xdQclxwwdtmo4CS462Dz3+vEFCy5uSLm0tTBZSc87Lg4L46BXq5vX1K
X73WCT+y6nHWjLjZH+A438986j/tzz7o4bSimIE3J3qhm12/5RcyOaCLdYHd
oSVmOxzji+tjsttO2eAonzigzV2Q0ANHON/vRk620wKHWHvs5dyO62Y4yOdr
bSUXM97DAX74bv7ntyK6ocKRQfGrtlw2wX6+s7Aww2LthA5+11j5lVrdAe1s
iz4fyw/aoJWDj5arF09ogWaOVovosuFm2MU/r3a+qs41QCOHbNGf3TarAbby
nbHGaU1zH8LnXGayne4t0MM63pk0+55pdzEs5eqA/NcNh8/RJ3W0zDIh7HhK
BWSKHHjkXt5QDZ9Rgu7Ni00pDbCV1iRO9xu9b4BGOpNqPLakqhl2kWGTaurm
6S3QTM7wkKOtF9qglQ7/uEh7ZmYHtJOxK0izt6kTOigt79u/Jm40wX56siju
1yf+3VChqMk1jtJ17+EAqWoy1/gXmuEg+Xh8y7MtFjhEfyfV7mqc1wNHyPR1
6pfzCmxwlA4lBwVHdNnhGIUW96R8pnJAF+m3X7k2nNsL3ZS88qd1TbV90EOV
uw5GLB/vh/+QK+A7v+qtTviRNC0r1KoSBXopYMWU+ppLCvRSfenbDTt0CvTS
ktw87R96BXopcE5VUWijAr307ECsNWRIgV6Kn7TgbOBGASW5fnB9oU8SUFKF
yVCWmCygpLCKvY+K0gWUNL611B6QJ6CkKt2clROvCijp+6nCcPWmgJKicuo0
aysFlFS8fuf+X2oElJQ9eOGcX5uAkhZuzwjTdQooyfz0m/JV3QJK2lzSWXe8
V0BJk3yvJ4QLASVxZk774xEBJR15vTY1zSOgJPwLSvoXZ0eYrQ==
       "]]},
     Annotation[#, "Charting`Private`Tag$18927#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1, 1}, {-1.999999918367347, 1.999999918367347}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.785927285949682*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"45ad566e-521f-4eed-81df-efbfc3c9d90d"]
}, Open  ]],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "plot y(t) = (A R V (b (a + b) (a E^(-(t/T)) T - E^(-(t/Y)) (a T + b (T - \
Y)) + \n        b E^(-(((a + b) t)/(b Y))) (T - Y)) Y - \n     a (a (a + b) \
E^(-(t/T)) T^2 - \n        a (a T + b (T - Y)) (T - Y) - (a + b) E^(-(t/Y)) \
(a T + b (T - Y)) Y +\n         b^2 E^(-(((a + b) t)/(b Y))) (T - Y) Y) - \n  \
   b (a + b) (a E^((q - t)/T) T - E^((q - t)/Y) (a T + b (T - Y)) + \n        \
b E^(((a + b) (q - t))/(b Y)) (T - Y)) Y HeavisideTheta[-q + t] + \n     a (a \
(a + b) E^((q - t)/T) T^2 - \n        a (a T + b (T - Y)) (T - Y) - (a + b) \
E^((q - t)/\n         Y) (a T + b (T - Y)) Y + \n        b^2 E^(((a + b) (q - \
t))/(b Y)) (T - Y) Y) HeavisideTheta[-q + \n        t]))/(a (a + b) r (a T + \
b (T - Y)) (T - Y))", Typeset`newq$$ = 
   "plot y(t) = (A R V (b (a + b) (a E^(-(t/T)) T - E^(-(t/Y)) (a T + b (T - \
Y)) + \n        b E^(-(((a + b) t)/(b Y))) (T - Y)) Y - \n     a (a (a + b) \
E^(-(t/T)) T^2 - \n        a (a T + b (T - Y)) (T - Y) - (a + b) E^(-(t/Y)) \
(a T + b (T - Y)) Y +\n         b^2 E^(-(((a + b) t)/(b Y))) (T - Y) Y) - \n  \
   b (a + b) (a E^((q - t)/T) T - E^((q - t)/Y) (a T + b (T - Y)) + \n        \
b E^(((a + b) (q - t))/(b Y)) (T - Y)) Y theta[-q + t] + \n     a (a (a + b) \
E^((q - t)/T) T^2 - \n        a (a T + b (T - Y)) (T - Y) - (a + b) E^((q - \
t)/\n         Y) (a T + b (T - Y)) Y + \n        b^2 E^(((a + b) (q - t))/(b \
Y)) (T - Y) Y) theta[-q + \n        t]))/(a (a + b) r (a T + b (T - Y)) (T - \
Y))"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"",DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm]],"\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{13., {4., 9.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", 
              "plot y(t) = (A R V (b (a + b) (a E^(-(t/T)) T - E^(-(t/Y)) (a \
T + b (T - Y)) + \n        b E^(-(((a + b) t)/(b Y))) (T - Y)) Y - \n     a \
(a (a + b) E^(-(t/T)) T^2 - \n        a (a T + b (T - Y)) (T - Y) - (a + b) \
E^(-(t/Y)) (a T + b (T - Y)) Y +\n         b^2 E^(-(((a + b) t)/(b Y))) (T - \
Y) Y) - \n     b (a + b) (a E^((q - t)/T) T - E^((q - t)/Y) (a T + b (T - Y)) \
+ \n        b E^(((a + b) (q - t))/(b Y)) (T - Y)) Y HeavisideTheta[-q + t] + \
\n     a (a (a + b) E^((q - t)/T) T^2 - \n        a (a T + b (T - Y)) (T - Y) \
- (a + b) E^((q - t)/\n         Y) (a T + b (T - Y)) Y + \n        b^2 E^(((a \
+ b) (q - t))/(b Y)) (T - Y) Y) HeavisideTheta[-q + \n        t]))/(a (a + b) \
r (a T + b (T - Y)) (T - Y))"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[6]:=",ExpressionUUID->"9f8146a1-c355-4aaf-a09e-88b2bbb8f852"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "plot y(t) = (A R V (b (a + b) (a E^(-(t/T)) T - E^(-(t/Y)) (a T + b (T - \
Y)) + \n        b E^(-(((a + b) t)/(b Y))) (T - Y)) Y - \n     a (a (a + b) \
E^(-(t/T)) T^2 - \n        a (a T + b (T - Y)) (T - Y) - (a + b) E^(-(t/Y)) \
(a T + b (T - Y)) Y +\n         b^2 E^(-(((a + b) t)/(b Y))) (T - Y) Y) - \n  \
   b (a + b) (a E^((q - t)/T) T - E^((q - t)/Y) (a T + b (T - Y)) + \n        \
b E^(((a + b) (q - t))/(b Y)) (T - Y)) Y theta (-q + t) + \n     a (a (a + b) \
E^((q - t)/T) T^2 - \n        a (a T + b (T - Y)) (T - Y) - (a + b) E^((q - \
t)/\n         Y) (a T + b (T - Y)) Y + \n        b^2 E^(((a + b) (q - t))/(b \
Y)) (T - Y) Y) theta (-q + t)))/(a (a + \n     b) r (a T + b (T - Y)) (T - \
Y))", Typeset`newq$$ = 
   "plot y(t) = (A R V (b (a + b) (a E^(-(t/T)) T - E^(-(t/Y)) (a T + b (T - \
Y)) + \n        b E^(-(((a + b) t)/(b Y))) (T - Y)) Y - \n     a (a (a + b) \
E^(-(t/T)) T^2 - \n        a (a T + b (T - Y)) (T - Y) - (a + b) E^(-(t/Y)) \
(a T + b (T - Y)) Y +\n         b^2 E^(-(((a + b) t)/(b Y))) (T - Y) Y) - \n  \
   b (a + b) (a E^((q - t)/T) T - E^((q - t)/Y) (a T + b (T - Y)) + \n        \
b E^(((a + b) (q - t))/(b Y)) (T - Y)) Y theta (-q + t) + \n     a (a (a + b) \
E^((q - t)/T) T^2 - \n        a (a T + b (T - Y)) (T - Y) - (a + b) E^((q - \
t)/\n         Y) (a T + b (T - Y)) Y + \n        b^2 E^(((a + b) (q - t))/(b \
Y)) (T - Y) Y) theta (-q + t)))/(a (a + \n     b) r (a T + b (T - Y)) (T - \
Y))"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"",DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm]],"\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{13., {4., 9.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", 
              "plot y(t) = (A R V (b (a + b) (a E^(-(t/T)) T - E^(-(t/Y)) (a \
T + b (T - Y)) + \n        b E^(-(((a + b) t)/(b Y))) (T - Y)) Y - \n     a \
(a (a + b) E^(-(t/T)) T^2 - \n        a (a T + b (T - Y)) (T - Y) - (a + b) \
E^(-(t/Y)) (a T + b (T - Y)) Y +\n         b^2 E^(-(((a + b) t)/(b Y))) (T - \
Y) Y) - \n     b (a + b) (a E^((q - t)/T) T - E^((q - t)/Y) (a T + b (T - Y)) \
+ \n        b E^(((a + b) (q - t))/(b Y)) (T - Y)) Y theta (-q + t) + \n     \
a (a (a + b) E^((q - t)/T) T^2 - \n        a (a T + b (T - Y)) (T - Y) - (a + \
b) E^((q - t)/\n         Y) (a T + b (T - Y)) Y + \n        b^2 E^(((a + b) \
(q - t))/(b Y)) (T - Y) Y) theta (-q + t)))/(a (a + \n     b) r (a T + b (T - \
Y)) (T - Y))"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[7]:=",ExpressionUUID->"2b509d5d-67c0-4b96-a732-c3555b74baad"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "a = 2", Typeset`newq$$ = "a = 2", 
   Typeset`chosen$$ = "a == 2", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse["a = 2", 
                  Defer[Global`a == 2], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"a", " ", "==", " ", "2"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"a", " ", "==", " ", "2"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"a", " ", "==", " ", "2"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse["a = 2", 
                    Defer[Global`a == 2], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"a", " ", "==", " ", "2"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"a", " ", "==", " ", "2"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"a", " ", "==", " ", "2"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[8]:=",ExpressionUUID->"c43a4d7c-7bc1-4c74-892a-e067fa5e30c9"],

Cell[BoxData[
 RowBox[{"a", "\[Equal]", "2"}]], "Output",
 CellChangeTimes->{3.7859274367056646`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"7c261e9b-c4c7-4f17-8fc2-d2010ed6a9cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "plot y = a*x", Typeset`newq$$ = 
   "plot y = a*x", Typeset`chosen$$ = 
   "Plot3D[a*x, {x, -6., 6.}, {y, -6., 6.}]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse["plot y = a*x", 
               Defer[
                Plot3D[
                Global`a Global`x, {Global`x, -6., 6.}, {Global`y, -6., 6.}]],
                "Fast parse"]; Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "plot y = a*x", 
                  Defer[
                   Plot3D[
                   Global`a Global`x, {Global`x, -6., 6.}, {
                    Global`y, -6., 6.}]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Plot3D", "[", 
                  RowBox[{
                   RowBox[{"a", "*", "x"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"y", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Plot3D", "[", 
                  RowBox[{
                   RowBox[{"a", "*", "x"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"y", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Plot3D", "[", 
                    RowBox[{
                    RowBox[{"a", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse[
                  "plot y = a*x", 
                   Defer[
                    Plot3D[
                    Global`a Global`x, {Global`x, -6., 6.}, {
                    Global`y, -6., 6.}]], "Fast parse"]; 
                 Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "plot y = a*x", 
                    Defer[
                    Plot3D[
                    Global`a Global`x, {Global`x, -6., 6.}, {
                    Global`y, -6., 6.}]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Plot3D", "[", 
                    RowBox[{
                    RowBox[{"a", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Plot3D", "[", 
                    RowBox[{
                    RowBox[{"a", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Plot3D", "[", 
                    RowBox[{
                    RowBox[{"a", "*", "x"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"y", ",", " ", 
                    RowBox[{"-", "6."}], ",", " ", "6."}], "}"}]}], "]"}]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[9]:=",ExpressionUUID->"3a6a77ce-2e0d-40cc-b941-2acf3ec39d5a"],

Cell[BoxData[
 Graphics3DBox[{{}, {}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{Full, Full, All},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7859274466640377`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"04362dcd-df5e-4b0f-abd3-4cdf517af4bb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "a = 2", Typeset`newq$$ = "a = 2", 
   Typeset`chosen$$ = "a == 2", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse["a = 2", 
                  Defer[Global`a == 2], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"a", " ", "==", " ", "2"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"a", " ", "==", " ", "2"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"a", " ", "==", " ", "2"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse["a = 2", 
                    Defer[Global`a == 2], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"a", " ", "==", " ", "2"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"a", " ", "==", " ", "2"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"a", " ", "==", " ", "2"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[10]:=",ExpressionUUID->"53880850-d0e0-4ee8-8ab1-b2d911aca3e7"],

Cell[BoxData[
 RowBox[{"a", "\[Equal]", "2"}]], "Output",
 CellChangeTimes->{3.7859274621416616`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"f5fc09ea-99a0-4ab8-977d-f16285d9c677"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "a = 2, plot y = a*x", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "GeometricFigure (ofBoundary)", "Geometric figure", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot3D[a x, {x, -6., 6.}, {y, -6., 6.}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{"y", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"a", " ", "x"}], Identity]}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "GeometricFigure (ofBoundary)", 
     "numsubpods" -> "1", "position" -> "200", "scanner" -> "Geometry", 
     "title" -> "Geometric figure"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox["\"line\"", 
              Global`TagBoxWrapper[
              "Entity" -> {Global`GeometryData, "Line"}]], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Properties", "input" -> 
         "GeometricFigure (ofBoundary)__Properties"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "3D plot", "scanner" -> "Plot", "id" -> "3DPlot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot3D[a x, {a, -1., 1.}, {x, -1., 1.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            Graphics3DBox[
             GraphicsComplex3DBox[CompressedData["
1:eJyNnXuwnlV1xhnvo7aj1T864wWwWmmdonItENlW27HealGZasc/FC+VVlFB
LZAA4RAC5CQhl0MuJychCQECCSQnOYaQnPCGLzHEKCR8gYCES/xAQC4qaGUG
x9r0fM/v+bof5kzDP2fOw846+13P2vtde6291nvkGd/69Fdfdthhh+1+1WGH
vfzgzyMf+uT6P/7xVw0/X9y06GsHf5avfXftwg3ffNr4zGN+8y8Hfy83vu5N
k7+5/3HjR9z4sY8e/L38cvn3vvbOj3aMrz9y+ckHfy9fHZOz3/iMMTn7Nb4d
49vCW4G3ymH6D5zfNb7E+EbyA283mk+J+Wh8J8Z3Gj1viedtpJ8S+mHeJfTp
50Gv6JPf+blkyxkfH+p7wnoGv/kf26f2zX/Uega/4PpLvrLnc49Yz7Wc+6zn
evxu67nGG+sZPPUc463nkG89x3ys55i/9RzPaz2Hfqzn0Kf1jP6wT8aBo09+
5+eEJz5/3PzPHLCewee8bttnPnf4A9ZzLWev9VyP32U91/gm6xk89RzjreeQ
bz3HfKznmL/1HM9rPYd+rOfQp/WMnljv6Bkc++Tfg6NPfufnym+97MMHfn6P
9Qw+qbLbdozfbj3X+Eip9dp5iZ5jvPUc8q3nmI/1HPO3nuN5refQj/Uc+rSe
0Qf7J3oGZ72jZ/DaPjvG0Se/83PxmJw7rOd6fGM91/ga6xk89RzjreeQbz3H
fKznmL/1HM9rPYd+rOfQZ9hz2++j2p7b3j9re27Heu8Yxz5re26HPtsxfiTs
GXxF2HN7HHv2+LBnyw979nzCnj3/sGc/b9iz9RP2bH2Gnlt+v9d6bvl9VOu5
5f2z1nPLeqv13LJ91npuWZ+1nsEHQs+tcfTs8aFnyw89t8L+OzF+JPTs5w09
Wz+hZ+uzST9pvPf6eO+h8fbN8db5eHY5nh7/v//Q8zjyX4Kj53Hm/xIcPSeO
nhNHz+Pg2E9B/2HPBb7Cnkv9frc9l1inxmP/jPErmrDngn2Op9ewZ8aXsGfk
l7DnUq+vTowfKWHPPG8Je0Y/JewZfZbYnwv7SezP5YL6vWCc/Sr25xLvd+P1
ftiO8SOh57b1P56dxv5c6v2nHfhI6NnzCT17/qFnP2/o2foJPVufJfyNwvsx
/I3C+zT8jRL+p/FJ9bnAeP1+b8f4xnqu8TXWc6778DfCPtuBNyX8jVL7P50Y
7/d+iect4W+gnxL+BvoMe+4U/L3wn0ucj4zjT4b/XPA/w38utb/ajvHbw547
tvPx9tHwn0vtt7QD3x727PmEPXv+Yc9+3rBn6yfs2foscR4scX43znknzoOF
8xF6Bkf/cR4M+2/H+F3Wc41vsp7zvYSeY7z1HPKt55iP9RLz9+/xvCXOg+in
xHkQfZaIbxTO4xHfKJzfI75h/aNncOw/4huljie0Y/xu67nGG+s53/PoOcZb
zyHfeo75WM8xf+srnte/h35KxDfQp/XM/ye+FPE66z/idbZ/9AzO/hPxulLH
x9oxvudP13jPz0u/CT3HeOs55FvPMR/rOeZvPcfzWo+hH/8e+izbj7roL/dv
eLbh51knnvfnffN7+vf///5HHnlgw7OMLzHeeonxTcgvMd54jC8x3r/779Tz
6cmLeQbexHj/3Zi/5T/f9/g3vrn/lw0/f//C13d/8nbjJfAmxpfAS+CeH//u
kQXPveP/juP/C/c45gvO7/y7kNOEnBLjm5DThJwm5mP5n5p/5Qt3/eYZr8uF
j8351It7niwXnHb3KUue+IXlvfmVm/+w+IlflFURVz9Sdst45KyYd8xHTj3u
cY8HX6P95Kc//Oz2Cbsdt2uO/tQDAwd/N874TS9+54QdLx4or5487zWv33bA
4yf89swDr9t2oJwZcfvZWneMR870z//FF948+qDHgy/Xfrj9yWPfcfrp9/bi
spP+7FefPf1e44y/Rev91E1nnf7EeXd5/NQZX379wd/Lb+t9prlV+wbjkbNA
78Hf1vt/cxnxhKOff+jSL620nLX39V1z8HfjjB+Vfz6pi9ve+rrjmyfrfay5
Sfse45Fzlc4FT9bvl+ZsvY+O6c7fcs7vPq9xx7flP9zW1ZvHr+jqs/lyvU82
/dq3GY+cddq3v1y/v5ohvU9f0eXXck7q2oNxxk/t8t7s69qVx7+na2/Nysib
vF3vHcYjZ2PXDj0efLX8gfO79m85b+yuF+OMX9ZdF80nuuvO41/xxfes+991
CM74ed312LBOeU/+1ZkvPvOumx/zugM/9qgbZz08ueN1B/4B+UusL/Dpn3jT
2qs/8aDXC/iSXWe/8Ibn7/N6AR+Wn8a6AMf+sXPwG654x6Ifbf+h7Rx8kfxD
7Bl856v7Oif/+zLbM/h1Xdz2CX6F/FLsEHxp9+/arsAvkN1iV+Cr5Q9jP+CD
XT3YHsAv7+rN9gB+ivxweAd/f5cX8wv+7i6P5hd/Z/OzX5p2Wv8B8ws+5ZwP
j/xh8CHzCz5XfjL8gi+/5kO/WXfNPvMLvu6U1pw/OWqv+QWfLL8RfsGXjO0n
O80v+KYxXm43v+BriKuIX/Drystf8Z6HFplf8G93cfMLvkznO/gFH+n+XfML
Pr87T/MLfr78bfgFv7mrB/MLfnVXb+YXfJbOU/ALfnGXF/MLfmuXR/OL37pg
bF3fb37Bu+/NfeYXfI3WHfyCd9+Pe8wveP/YvvcT8wu+VHED+AXfEO8pz1Pr
FH7BpypeAb/go4rLwS/4gOJ78At+tuIk8As+U+safsGH9f6CX/BFis/Ar+fZ
1YP5Be/u53vMLzj7APyCd/ftfeYXvLs/3x/rt631uyfWb1vr985Yv22t312x
fttavzti/ba1frfF+m1r/Taxfttavxtj/ba1fodj/ba1flfE+m1r/fbH+m1r
/fbH+m1r/a6I9dvW+h2O9dvW+t0Y67et9dvE+m1r/W6L9dvW+t0R67et9bsr
1m9b6/fOWL9trd89wW9L/G4Nflvid0vw2xK/m4LflvjdEPy2xO/64LclftcE
vy3xuzL4bYnfZcFvS/wOBL8t8Tsx+G2J34nBb0v8DgS/LfG7LPhtid+VwW9L
/K4Jflvid33w2xK/G4LflvjdFPy2xO+W4Lclfrea38ybwG/i8Js4/CYOv4nD
b+Lwmzj8Jg6/icNv4vCbOPwmDr+Jw2/i8Js4/CYOv4nDb+Lwmzj8Jh7rt2j9
NrF+i9ZvE+u3aP02sX6L1m8T67do/TaxfovWbxPrt2j9NrF+i9ZvE+u3aP02
sX6L1m8T67do/ZZYv0Xrt8T6LVq/JdZv0fotsX6L1m+J9Vu0fkus36L1W2L9
Fq3fEuu3aP2WWL9F67fE+1f87gl+2+L3zuC3LX53Bb9t8bsj+G2L323Bb1v8
NsFvW/xuDH7b4nc4+G2L3xXBb1v89ge/bfHbH/y2xe+K4LctfoeD37b43Rj8
tsVvE/y2xe+24LctfncEv23xuyv4bYvfO4PftvjdU8J/LvKfm/Cfi/znJvzn
Iv+5Cf+5yH9uwn8u8p+b8J+L/Ocm/Oci/7kJ/7nIf27Cfy7yn5vwn4v85yb8
5yL/uYT/XOQ/l/Cfi/znEv5zkf9cwn8u8p9L+M9F/nMJ/7nIfy7hPxf5zyX8
5yL/uYT/XOQ/x/rtaP0eiPXb0fp9KNZvR+v3gVi/Ha3ffbF+O1q/e2P9drR+
d8f67Wj97oz129H6vT3Wb0frdyTWb0frd1Gs347W76JYvx2t35FYvx2t39tj
/Xa0fnfG+u1o/e6O9dvR+t0b67ej9bsv1m9H6/eBWL8drd+HYv12tH4PlIhf
FcWvmohfFcWvmohfFcWvmohfFcWvmohfFcWvmohfFcWvmohfFcWvmohfFcWv
mohfFcWvmohfFcWvmohfFcWvSsSviuJXJeJXRfGrEvGrovhVifiV113Er4ri
VyXiV0XxqxLxq6L4VYn4VVH8qkT8qih+lXmEojxCE3kB7c+PN5EX0P78aBPx
f+3PB5qI5xfF85uI5xfF85uI2xfF7ZuIw2t/3tVEHL5cxj2oOt6u/XlFxs+L
4ucl4ufan5sScXLtz7tKxL2L4t4l4t5Fce8S8W3tzw+WiFdrfz5QIl4tO3m0
RFxa+/PjJeLP2p+fNL/kj16teHXkiYryRE3kiYryRE3kfYryPk3kd4ryO03k
d4ryO03ka4ryNU3kZbyuIy9TlJdpIs9SlGdpIp9SlE8pkU8pyqeUyI8U5UdK
5EGK8iAl8iBFeZASeY2ivEaJ/EVR/qJE/qIof1EiH1GUjzCP/Nz7p3dcePwp
TzmO8bdjz/FL5wHh8d+Uj1gb+bvTJOfEtww+duYbO45jnCw5zYHTHn7wLb08
3dfJD0beDTnrtY/BI3L65R/CI3L6I1/2z5JDvgweT5KczHMhJ/NcyOl/16Or
/u6/e/ks5Kw6vfPU7151j+MY6Gdx5KeQ0zf5M188+7UPO46BnOGj1z2+YGPH
cQzmc1PklT4tOW+/5V//62cfe8L8zR17viedb4VHfh71/dcuHHzbz80jP0+N
fNBVkjNlzG4fNo8XSc5c2Sc8rpac9ZEPQk4jvx0eL5Scxc8t//1ZH/yReUTO
ksgHISfzm8jJfBByMh+EnCU6x8EjcogDwyP6uSnyQQOSM29s/j81j8iZODL3
Df+w8xHzyHwmRD5onuRwj4j9drLkHB783id+jtP6gtfbx57j583GMT38zPP+
lfIOV0U+iJ9D8rfhd5vkXCd/D35/LTmXRj4IOfO668L8tiTnZt2jg1/krIt8
EHIy34eczAchJ/NByCEvAL/IuWJMzo/NL/qZGPmg+/Erz3h+3n98/x7zixzu
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
r/Hg1/YZ9mY87K13b6m2N+Nhb7Zn/Mpbou+Q7w/qPg92CE49LPYGTh0ldgW+
oe4vEeM32k5qvFe/kfUi8B7jzW/IN48xH/MV8zcv8bzWf+it15+h1pv1jJ9O
XTw4fjp5MfTPePQMznjq7uGF8dQjgzOeemT4Yjz1reCMp74VHuv5bzLOeOol
4beWP2y8lt/r+1ePX2a8Ht/rB3iodULYScj3vhHybT8xf+Mxf9tV6Md46Mf2
Fvo3Hvq3HQa/xoNf22fYm/GwN9tt2JvxsLdevyadI7m/5L4Swt3PgXvOwndW
/HYiT7eo19e3ku8+eDG+33aS+T74z/oweI/x5jfk9/r61vMxXzH/Xl/f+nl7
fX1rvfXud9Z6s545l3OvD5xz+dk1jx5PfwxwxtMfA14Yz30zcMZfUfnhHY/n
/hJ4nV/r9UtkPPdhwOv59/oo1vL7jdfye/0V6/ETjWfeEP4PtS4QOwn5rsvK
fCL2E/M3HvPv9bOr9WM89ON6g9C/8dC/768Hv8aDX9+HDnszHvbm+EXYm/Gw
N7/viBvRRwX7BKfvCnYITr8L7A2cPgnYVS3f58cYP2w7qfFltpOsB4X3GG9+
Q755jPmYr5i/eYnntf5Db9Zz6M16Jg5Hnxlw4nBDtd/o8fSxAWc8fWzghfEX
BF+MX12frz2e/hXgjKd/BTwynnuP4IxfFP0qa/kbjdfye30s6/G9+vB6fK+/
5aHWAWMnId/7Rsi3/cT8jcf8bVehH+OhH9tb6N946N92GPwaD35tn2FvxsPe
bLdhb8bD3mzPxInpd+S+Qtx/1HkHOwSnvw32Bk5fFOyqlv8T2089fpvtpMbX
206y/hveY7z5DfnmMeZjvmL+5iWe1/oPvfXizrXerGfi7vSDAve97zpO5fH0
mwJnPP2m4IXx9BcCZ/wp0eeT8fSrAWc8/WrgsZ6/48kx/15f0Fr+DuO1/F6/
0Hr8BuP1+F4f0UOt+8dOQr73jZBv+4n5G4/5265CP8ZDP7a30L/x0L/tMPg1
HvzaPsPejIe92W7D3oyHvdmeyQvRl8z93YTTxww7BKefFfYGTh8k7KqWv8/2
U4+/03ZS41tsJ9nvAd5jfK9evZZvHmM+vfrYev7mJZ7X+g+99eq+ar1Zz+S1
6OeGPsHpA4Y+wekfhT5rOfdbn/X4PdZnjW+1PrNPBvqM8dZnyLc+Yz7WZ8zf
+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
v8MnPP4PuEb3VA==
              "], {{{
                 EdgeForm[], 
                 Directive[
                  GrayLevel[1], Lighting -> "Neutral"], 
                 GraphicsGroup3DBox[
                  TagBox[{
                    Polygon3DBox[CompressedData["
1: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
NYuOOzWPYki9r+85vuNIU68HxYSKNz+GyxYdO3+q2Aa+Dp21iePMDfmefbng
WPsz+IiicwjZouUFx8Ib4IOQdebadYnj6r7B8YzimiNS68uGjY6OU79Ona9o
bUxgnpOLXp+lCvYx8jX3w22C8ybZwAZ5TFKl4JhPsV9jPu8bbYf0+bjgfSSf
Mi06VrtXe7PotX0g100Mtoey/3o+f+XPSPmW1vAkdOoVvS8qwgtzv3k/siXM
+Qjjg1y7HPlliWOVZqljFcUsvaLj3feRLeH80sQxySlF76nyzNkjOiZ7D51P
0OmWOI/rFh1Pb5TPSr2eFZvcF5zL/JzHqH8mjlNHBMecij3bwocm9i+/6vdp
L3BUL3rfpXxv/9x2fJQ6PtK93YC8d/CzVdzXkqM2fDry3dG+anHqnEP76CPk
reBT4IbKK6Nj2S2pYws9q06yV9G5xPrUMY6eVdeC/W1LuIP8V3BOp9hM+263
7HPi+ENxyHXozAnWVxyl3/U3x47EOfXWxDl41+h8Y0NqH6U1rKRHMZTise7y
rUU/n/84uuR50bupY1it26zoPO9dvUf47ej8dDo6dzCei/xy5hkEN4dbwVui
/cRsdLZF57bz5K/hL+Bn5dei/coceARjC65tx7Uj4fPh9rJj+e/tCD8WHc8o
RtoanZvPhe8uOna6Gp3t0fn1c8hvZzwb+aXylcppOX8G+Sb4Db0z+P3ofPaJ
1DasA/r90f8R+WbZzdTrW++uc8FrXHFUb/hD5Z+cz0RnetFx4y3yj9G1iyeR
Ty06Nutb8Bo4E76kYBup+HNAvq8VNw6CXyw6try3YNupuPEu+Gls3X7B9nk2
fGDI8wB0btR6R2dx0bHlGHgmOgU+P4t7mQcfDJ8PD0DnDHRaovM2PBSeAT+F
TorOOejMRX4D8uHIF2Wu7bRG/hJ8tPZt7scGoDMFnZeRV9aeR74MPk6xfv68
b0dnunRy2zUOXgsPgR+TPYcHwY/oHoqOmQcr9ouuHb2g2FU2FPnQgt/bYHgq
/ETR8flAeJlqIfADyPbmMdZSri1mzkmWa58mthHbcjshLsnxTeI9tjXfQ7/m
9mF3Lpe/OzO4VtCQcQ7zjy46R5CNlK2U318QnX89gHxhdH40UTFAPud27edc
X37n9/wedF+7crk+fyO63vVY6lxQvixw/pbyQ8Zpua37Pb//Z6LzJsX/i+Ep
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
Da9h/Ce4zq96RcnUfQHVNK4I7mWrj1kzdR1M9kq99SZ8tlx2IrU9l11vHdxL
VY+yeb62ZRsOS92bU/61NbgOoHpOh9R/U6G+wCXBtUT1K89O3btRf6F06v6F
aiOXBdfH9L6vzvOs/99rebwqf/ZdcD9Itdy7gusP6o+PD64dqW8+ILg+qXr/
kan7esolK+T2U/ZmFzqj4FmKIYPrfqpR/xbcm1C9pV9w3Uz11Z3BPQLVdn4J
7lmoVjMEbpy4t35t8N97qB89JrhepL729tzvK+74KuT1CuTb8jhKMc0FuW2R
DbsnuPalfvFfwX0Z1Zeqpu7PKif9GPnAxPXwwcG9cvXfhwb3JvQ3Bi1S99HU
+/gouMaierhyV+XTysFPSl1Ll09Rjrk1cV2ifur+jnLnB4PjK8VZjVP3Q9U3
b5jvKfmKYupem2p0tTkWJq6TnJK6H6Rc+8bgv5NRDz2m7sep5vZvcL1d8WRl
zp/SM9E+St2HVV4cdB+J63tr0e8KPwS3DP4bA/W+VwfXr1Sv+C+4rq5Yq3rq
urFqOCuD61GqpVRK3V9Wfn1C6p6F6gPlUvtu1RlUl1B9RfthUnBdUX/zUCZ1
v0k1pS7BvRv53R56pvAw5N2C/yZHf/vRJ7iGrNpvp+C/89HfFajmoPr6BvZa
09R+TT5Uf4+kd6R3dXLqvptqAmek7pmql9c1+G+E9LcEPwT3s1RPuCj138mo
1/Z/9N6o5g==
                    "]], 
                    Polygon3DBox[CompressedData["
1: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
BvTVJzPr2/8HLJVvSw==
                    "]], 
                    Polygon3DBox[CompressedData["
1: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
eQxb9+Qn9qbqGs2nyueoQMTu8VDzJvY59NJZf37i2RjSWHqFfZbYkp71AfUF
5c3zsDKefXd9f+XmW7AvYHmx86EPNX41R8MKyEaFIrYu0foknrO6fCvH39X3
lePxyab4iM2zmm+zOcvDZ9XnfMu7S/X8yuPK0b7N3ythFfRffVvDaS1X3Nl6
6m+Oe33Lz8vxK6s6A6VEKVAxZ7X6M44l0H3dj+dYyj/PrPpIi0diFxC7UDkB
JdTaB7/R+H2DdjmrqacoD2rdqPGrf4SWe2aLd4lYXlZ+LuxsrfhAa0GNOdrb
NPehK9il0TPVptjHtHYkdifPsUO1o7M1wgaOvymXedbn1fdVRz/S/9U87Sz/
P+aYB52kvROfHeiq8jE6A9uDvRtdwy6DXsCuy1ZdHbC/YT9h/4zmqMaAzYGN
VJ2ja2KXQ69hd7BvIxUxZWEvlXuxf0VzYYU0p+m5OfdO/QvWl3aUs/6lmq8f
7fhoFu3hxHXgcsfCNrYKwVLCUqH0wT3+1bjFvoHeBd/vueoUjRf0Oni+/2An
sU+heRGrKVVbXgjqz/743MK+idI7W98e55gObfFsjtRcGUXsReUd1TTO1tAH
9RxcJ4p2S3xaoAWwf2A9YE2wP+U9ZhPzEtYL1gzWFM13tu5e79ncpznwEPYr
/PrDWmO3Qgth0arJlaN8q/0nObteT9W7+FTTfSJWG6tGfuDbumGq3l81Fu02
+NTiWRaE7R79YDVgNdFnwVqjrWe2uGK1BtZaOCbtCZxbH7xvH9rVFYeqE3sU
fgSlcVbvHOP4Br/BtNvjU4f7LtK6DRYN6wSrB1sStvX+UFhH/XPNvepTsEGw
dspFaJGzdbvW756ztbty3i783tI+ozqA6+VXTYyqwQorV8K6hm1uagyrBKuI
viP2Nqwh7GPsYvhFhW1eawCrACuv/+5s7a01eFza0zQnO5tj69Euh09Z5VFn
654Wnv0L/ZOJmkfQ17AG2A31HSI2v8QIW62hmsOP2DxeG7/S2KXQGHz2+FZr
LdY6SvMW6u7b+k7rvFKcO+pbvay6+apv67MRQc1QnXZR/Ipozgrm3RqwEtjF
0WjYCOKG61l8W2NNge32bYzO574FlP982yPSXlFKZ/tE6qfD9G5B3aH6fXjw
3wbSrq13VT/iGq2Ja4Uu+7YejcZvJu3VtL/Gpx3vc5bzo7U203rCt72Aafhd
xr6ktYuzfazDHJOhlbQnE9uT2FNhqxkveZZTlVu1X6M6ZyEsCruv6oOI1d6Z
8f9X+Q7tjFhdetWzPKt8q/WUapolmhuwB6BOWk/Blqkexu7OfU+Ebb5fofGo
/432BnPw757N65rftRbTuljr47u+rY0nBmNlo2f5RHlFawStT7VOPefbvkkf
fJKr79Meik80+gq/XrCeQb7W+ra3agj9R5TF2frslLP1htYdaZ3t0f3o7H/q
v5YP8pz6n9aDuzm/THkQncS+qzUAyuhsv+uEszw4j3YvPa/Ga5AXZntWh6oe
bR+xOucIbI7mfzQ8Yvta2t+K7WwvSvlS6/jOnu3zab9vprOaqwAsMXYSlI7Y
icRNQH/5to8wC7+p2FPQC9/W/XOCnHfCs3fQu4zSPhc+Y9FT3/aTZjjbS9Ke
0jPf9hFmBmN1GO0uxHXWfOJsb0p7VBd92zcZHOTQ05p/8Fmpfxexf7RK8y32
FLTP2b6g9gczOVtr65tq30P7H39zva6w2c72ljp4Nl40bqY7q/9+1BhUPlG+
jVjNcBy2SHMkGhmxfTLtlz32bX9KsQPRgKBO0D7bIGfrojGe5SflKe1J1iWu
DjoTrAt74PM/gNHiaA==
                    "]]}, 
                   Annotation[#, 
                    "Charting`Private`Tag$3770347#1"]& ]]}, {}, {}, {}, {}}, {{
                 GrayLevel[0], 
                 Line3DBox[CompressedData["
1:eJwt0s1L03EAx/HvNjeXy2nNrPXg1M6FYMeEwqMPxLwVXbyZ1a4Fgt70LyiM
rgVC3vQvKIro5sN0M3sgQnq6uCyloF5f8PDm9WEbv/1+361nvFK+mwghzOuX
4t7VJw2mQmhnmWMq2RVe5DRnNGA/5jCfcVE37Ne8xRrruh+vzzlmmkJo1kP7
PJ+yn5e0bF/jC77hDve1qp/6rmPJENZ4nAWt2x2s8gQ7tWGf5CZPsaiafZp1
nuFZbdnn+JZdLGnb7uY79rBX7+O98gOveI4vPNBH7emHJt3vCm/yOUc5oiW7
j0/i9ditB3aKs/G5XK+he3aVE3zFl7puL3CIjzivy/YUL/AOb6srnrnrfeZv
tamhbyr5UfPxOdkaz4BFHY1nxFw8PxbUEs+XR5iPn1fWzrGZ2agydpppJpmQ
rw//4nPpr/7E93TVC18P/1//AX/HRZs=
                  "], VertexColors -> None]}, {
                 Opacity[0.45], 
                 
                 Line3DBox[{835, 1223, 548, 834, 1381, 1229, 1562, 836, 1382, 
                  1132, 837, 1383, 1230, 1563, 838, 1384, 1133, 839, 1385, 
                  1231, 1564, 840, 1386, 1134, 841, 1387, 1232, 1565, 842, 
                  1388, 1135, 843, 1389, 1233, 1566, 844, 1390, 1136, 845, 
                  1391, 1234, 1567, 846, 1392, 1137, 847, 1743, 1224, 1138, 
                  1225}, VertexColors -> None], 
                 
                 Line3DBox[{851, 1393, 1139, 849, 1394, 569, 853, 1395, 1140, 
                  855, 1397, 1398, 1141, 857, 1399, 1142, 859, 1401, 1402, 
                  1143, 861, 1403, 1144, 863, 1405, 1406, 1145, 865, 1407, 
                  1146, 867, 1409, 581, 869, 1410, 1147, 871, 1412, 1413, 
                  1148, 873, 1414, 1149, 875, 1416, 1151, 877}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{876, 1150, 1415, 874, 1580, 1246, 872, 1579, 1245,
                   1411, 870, 1578, 1244, 868, 1577, 1243, 1408, 866, 1576, 
                  1242, 864, 1575, 1241, 1404, 862, 1574, 1240, 860, 1573, 
                  1239, 1400, 858, 1572, 1238, 856, 1571, 1237, 1396, 854, 
                  1570, 1236, 852, 1569, 568, 848, 1568, 1235, 850}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{879, 1247, 1581, 878, 1417, 1248, 1582, 880, 590, 
                  881, 1418, 1249, 1583, 882, 593, 883, 1419, 1250, 1584, 884,
                   596, 885, 1420, 1251, 1585, 886, 599, 887, 1421, 1252, 
                  1586, 888, 1253, 1587, 889, 1422, 1254, 1588, 890, 1423, 
                  1152, 891, 1424, 1153, 892}, VertexColors -> None], 
                 
                 Line3DBox[{896, 1425, 1154, 894, 1426, 1257, 1592, 898, 1427,
                   1155, 900, 1428, 612, 902, 1429, 1156, 904, 1430, 1261, 
                  1598, 906, 1431, 1157, 908, 1432, 1264, 1602, 910, 1433, 
                  1158, 912, 1434, 1267, 1606, 914, 1435, 1159, 916, 1436, 
                  624, 918, 1437, 1160, 920, 1439, 1162, 922}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{921, 1161, 1438, 919, 1610, 1270, 917, 1609, 1608,
                   1269, 915, 1607, 1268, 913, 1605, 1604, 1266, 911, 1603, 
                  1265, 909, 1601, 1600, 1263, 907, 1599, 1262, 905, 1597, 
                  1596, 1260, 903, 1595, 1259, 901, 1594, 611, 899, 1593, 
                  1258, 897, 1591, 1590, 1256, 893, 1589, 1255, 895}, 
                  VertexColors -> None], 
                 Line3DBox[{924, 1271, 1611, 923, 1440, 1272, 1612, 925, 630, 
                  926, 1441, 1273, 1613, 927, 633, 928, 1442, 1274, 1614, 929,
                   1275, 1615, 930, 1443, 1276, 1616, 931, 1277, 1617, 932, 
                  1444, 1278, 1618, 933, 1279, 1619, 934, 1445, 1280, 1620, 
                  935, 1446, 1163, 936, 1447, 1164, 937}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{941, 1448, 1165, 939, 1449, 1283, 1624, 943, 1450,
                   1166, 945, 1452, 1453, 1167, 947, 1454, 1168, 949, 1455, 
                  655, 951, 1456, 1169, 953, 1457, 658, 955, 1458, 1170, 957, 
                  1459, 1291, 1635, 959, 1460, 1171, 961, 1461, 1462, 1172, 
                  963, 1463, 1173, 965, 1465, 1175, 967}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{966, 1174, 1464, 964, 1639, 1294, 962, 1638, 1637,
                   1293, 960, 1636, 1292, 958, 1634, 1633, 1290, 956, 1632, 
                  1289, 954, 1631, 1630, 1288, 952, 1629, 1287, 950, 1628, 
                  654, 948, 1627, 1286, 946, 1626, 1285, 1451, 944, 1625, 
                  1284, 942, 1623, 1622, 1282, 938, 1621, 1281, 940}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{969, 1295, 1640, 968, 1466, 1296, 1641, 970, 1467,
                   1176, 971, 1468, 1297, 1642, 972, 1469, 1177, 973, 1470, 
                  1298, 1643, 974, 676, 975, 1471, 1299, 1644, 976, 1300, 
                  1645, 977, 1472, 1301, 1646, 978, 1302, 1647, 979, 1473, 
                  1303, 1648, 980, 1474, 1178, 981, 1475, 1179, 982}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{986, 1476, 1180, 984, 1477, 1306, 1652, 988, 1478,
                   1181, 990, 1480, 1481, 1182, 992, 1482, 1183, 994, 1484, 
                  695, 996, 1485, 1184, 998, 1487, 698, 1000, 1488, 1185, 
                  1002, 1489, 1315, 1662, 1004, 1490, 1186, 1006, 1491, 1492, 
                  1187, 1008, 1493, 1188, 1010, 1495, 1190, 1012}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{1011, 1189, 1494, 1009, 1666, 1318, 1007, 1665, 
                  1664, 1317, 1005, 1663, 1316, 1003, 1661, 1660, 1314, 1001, 
                  1659, 1313, 999, 1658, 1312, 1486, 997, 1657, 1311, 995, 
                  1656, 1310, 1483, 993, 1655, 1309, 991, 1654, 1308, 1479, 
                  989, 1653, 1307, 987, 1651, 1650, 1305, 983, 1649, 1304, 
                  985}, VertexColors -> None], 
                 
                 Line3DBox[{1014, 1319, 1667, 1013, 1496, 1320, 1668, 1015, 
                  1497, 1191, 1016, 1498, 1321, 1669, 1017, 1499, 1192, 1018, 
                  1500, 1322, 1670, 1019, 716, 1020, 1501, 1323, 1671, 1021, 
                  719, 1022, 1502, 1324, 1672, 1023, 1325, 1673, 1024, 1503, 
                  1326, 1674, 1025, 1504, 1193, 1026, 1505, 1194, 1027}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{1031, 1506, 1195, 1029, 1507, 729, 1033, 1508, 
                  1196, 1035, 1510, 1511, 1197, 1037, 1512, 1198, 1039, 1514, 
                  1515, 1199, 1041, 1516, 1200, 1043, 1518, 1519, 1201, 1045, 
                  1520, 1202, 1047, 1521, 741, 1049, 1522, 1203, 1051, 1523, 
                  1524, 1204, 1053, 1525, 1205, 1055, 1527, 1207, 1057}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{1056, 1206, 1526, 1054, 1688, 1337, 1052, 1687, 
                  743, 1050, 1686, 1336, 1048, 1685, 740, 1046, 1684, 1335, 
                  1044, 1683, 1334, 1517, 1042, 1682, 1333, 1040, 1681, 1332, 
                  1513, 1038, 1680, 1331, 1036, 1679, 1330, 1509, 1034, 1678, 
                  1329, 1032, 1677, 1676, 1328, 1028, 1675, 1327, 1030}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{1059, 1338, 1689, 1058, 1528, 1339, 1690, 1060, 
                  1529, 1208, 1061, 1530, 1340, 1691, 1062, 1531, 1209, 1063, 
                  1532, 1341, 1692, 1064, 1533, 1210, 1065, 1534, 1342, 1693, 
                  1066, 759, 1067, 1535, 1343, 1694, 1068, 762, 1069, 1536, 
                  1344, 1695, 1070, 1537, 1211, 1071, 1538, 1212, 1072}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{1076, 1539, 1213, 1074, 1540, 1347, 1699, 1078, 
                  1541, 1214, 1080, 1543, 772, 1082, 1544, 1215, 1084, 1545, 
                  775, 1086, 1546, 1216, 1088, 1547, 778, 1090, 1548, 1217, 
                  1092, 1549, 1353, 1708, 1094, 1550, 1218, 1096, 1551, 784, 
                  1098, 1552, 1219, 1100, 1554, 1221, 1102}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{1101, 1220, 1553, 1099, 1711, 1355, 1097, 1710, 
                  783, 1095, 1709, 1354, 1093, 1707, 780, 1091, 1706, 1352, 
                  1089, 1705, 777, 1087, 1704, 1351, 1085, 1703, 774, 1083, 
                  1702, 1350, 1081, 1701, 1349, 1542, 1079, 1700, 1348, 1077, 
                  1698, 1697, 1346, 1073, 1696, 1345, 1075}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{1104, 1356, 1712, 1103, 1555, 1357, 1713, 1105, 
                  1358, 1714, 1106, 1556, 1359, 1715, 1107, 1360, 1716, 1108, 
                  1557, 1361, 1717, 1109, 1362, 1718, 1110, 1558, 1363, 1719, 
                  1111, 1364, 1720, 1112, 1559, 1365, 1721, 1113, 1366, 1722, 
                  1114, 1560, 1367, 1723, 1115, 805, 1116, 1561, 1222, 1117}, 
                  VertexColors -> None], 
                 
                 Line3DBox[{1131, 1228, 830, 1130, 1742, 1379, 1129, 1741, 
                  1740, 1378, 1128, 1739, 1377, 1127, 1738, 1737, 1376, 1126, 
                  1736, 1375, 1125, 1735, 1734, 1374, 1124, 1733, 1373, 1123, 
                  1732, 1731, 1372, 1122, 1730, 1371, 1121, 1729, 1728, 1370, 
                  1120, 1727, 1369, 1119, 1726, 1725, 1368, 1118, 1380, 1724, 
                  1226, 1227}, VertexColors -> None]}, {
                 Opacity[0.45], 
                 
                 Line3DBox[{251, 549, 1381, 253, 568, 1394, 290, 588, 1417, 
                  310, 1590, 608, 1426, 330, 628, 1440, 350, 1622, 648, 1449, 
                  370, 668, 1466, 390, 1650, 688, 1477, 410, 708, 1496, 430, 
                  1676, 728, 1507, 450, 748, 1528, 470, 1697, 768, 1540, 490, 
                  788, 1555, 510, 1725, 808, 530}, VertexColors -> None], 
                 
                 Line3DBox[{255, 551, 1382, 256, 1570, 570, 1395, 292, 590, 
                  312, 1593, 610, 1427, 332, 630, 352, 1625, 650, 1450, 372, 
                  670, 1467, 392, 1653, 690, 1478, 412, 710, 1497, 432, 1678, 
                  730, 1508, 452, 750, 1529, 472, 1700, 770, 1541, 492, 1714, 
                  790, 512, 1727, 810, 532}, VertexColors -> None], 
                 
                 Line3DBox[{257, 552, 1383, 259, 571, 1396, 1397, 293, 591, 
                  1418, 313, 611, 1428, 333, 631, 1441, 353, 651, 1451, 1452, 
                  373, 671, 1468, 393, 691, 1479, 1480, 413, 711, 1498, 433, 
                  731, 1509, 1510, 453, 751, 1530, 473, 771, 1542, 1543, 493, 
                  791, 1556, 513, 1728, 811, 533}, VertexColors -> None], 
                 Line3DBox[{261, 554, 1384, 262, 1572, 573, 1399, 295, 593, 
                  315, 1595, 613, 1429, 335, 633, 355, 1627, 653, 1454, 375, 
                  673, 1469, 395, 1655, 693, 1482, 415, 713, 1499, 435, 1680, 
                  733, 1512, 455, 753, 1531, 475, 1702, 773, 1544, 495, 1716, 
                  793, 515, 1730, 813, 535}, VertexColors -> None], 
                 
                 Line3DBox[{263, 555, 1385, 265, 574, 1400, 1401, 296, 594, 
                  1419, 316, 1596, 614, 1430, 336, 634, 1442, 356, 654, 1455, 
                  376, 674, 1470, 396, 694, 1483, 1484, 416, 714, 1500, 436, 
                  734, 1513, 1514, 456, 754, 1532, 476, 774, 1545, 496, 794, 
                  1557, 516, 1731, 814, 536}, VertexColors -> None], 
                 
                 Line3DBox[{267, 557, 1386, 268, 1574, 576, 1403, 298, 596, 
                  318, 1599, 616, 1431, 338, 1615, 636, 358, 1629, 656, 1456, 
                  378, 676, 398, 1657, 696, 1485, 418, 716, 438, 1682, 736, 
                  1516, 458, 756, 1533, 478, 1704, 776, 1546, 498, 1718, 796, 
                  518, 1733, 816, 538}, VertexColors -> None], 
                 
                 Line3DBox[{269, 558, 1387, 271, 577, 1404, 1405, 299, 597, 
                  1420, 319, 1600, 617, 1432, 339, 637, 1443, 359, 1630, 657, 
                  1457, 379, 677, 1471, 399, 697, 1486, 1487, 419, 717, 1501, 
                  439, 737, 1517, 1518, 459, 757, 1534, 479, 777, 1547, 499, 
                  797, 1558, 519, 1734, 817, 539}, VertexColors -> None], 
                 
                 Line3DBox[{273, 560, 1388, 274, 1576, 579, 1407, 301, 599, 
                  321, 1603, 619, 1433, 341, 1617, 639, 361, 1632, 659, 1458, 
                  381, 1645, 679, 401, 1659, 699, 1488, 421, 719, 441, 1684, 
                  739, 1520, 461, 759, 481, 1706, 779, 1548, 501, 1720, 799, 
                  521, 1736, 819, 541}, VertexColors -> None], 
                 
                 Line3DBox[{275, 561, 1389, 277, 580, 1408, 1409, 302, 600, 
                  1421, 322, 1604, 620, 1434, 342, 640, 1444, 362, 1633, 660, 
                  1459, 382, 680, 1472, 402, 1660, 700, 1489, 422, 720, 1502, 
                  442, 740, 1521, 462, 760, 1535, 482, 780, 1549, 502, 800, 
                  1559, 522, 1737, 820, 542}, VertexColors -> None], 
                 
                 Line3DBox[{279, 563, 1390, 280, 1578, 582, 1410, 304, 1587, 
                  602, 324, 1607, 622, 1435, 344, 1619, 642, 364, 1636, 662, 
                  1460, 384, 1647, 682, 404, 1663, 702, 1490, 424, 1673, 722, 
                  444, 1686, 742, 1522, 464, 762, 484, 1709, 782, 1550, 504, 
                  1722, 802, 524, 1739, 822, 544}, VertexColors -> None], 
                 
                 Line3DBox[{281, 564, 1391, 283, 583, 1411, 1412, 305, 603, 
                  1422, 325, 1608, 623, 1436, 345, 643, 1445, 365, 1637, 663, 
                  1461, 385, 683, 1473, 405, 1664, 703, 1491, 425, 723, 1503, 
                  445, 743, 1523, 465, 763, 1536, 485, 783, 1551, 505, 803, 
                  1560, 525, 1740, 823, 545}, VertexColors -> None], 
                 
                 Line3DBox[{285, 566, 1392, 286, 1580, 585, 1414, 307, 605, 
                  1423, 327, 1610, 625, 1437, 347, 645, 1446, 367, 1639, 665, 
                  1463, 387, 685, 1474, 407, 1666, 705, 1493, 427, 725, 1504, 
                  447, 1688, 745, 1525, 467, 765, 1537, 487, 1711, 785, 1552, 
                  507, 805, 527, 1742, 825, 547}, VertexColors -> None], 
                 
                 Line3DBox[{287, 827, 1743, 828, 288, 586, 1415, 1416, 308, 
                  606, 1424, 328, 626, 1438, 1439, 348, 646, 1447, 368, 666, 
                  1464, 1465, 388, 686, 1475, 408, 706, 1494, 1495, 428, 726, 
                  1505, 448, 746, 1526, 1527, 468, 766, 1538, 488, 786, 1553, 
                  1554, 508, 806, 1561, 528, 830, 831, 832}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{529, 807, 829, 1724, 509, 787, 1712, 489, 1539, 
                  767, 1696, 469, 747, 1689, 449, 1506, 727, 1675, 429, 707, 
                  1667, 409, 1476, 687, 1649, 389, 667, 1640, 369, 1448, 647, 
                  1621, 349, 627, 1611, 329, 1425, 607, 1589, 309, 587, 1581, 
                  289, 1393, 567, 1568, 250, 548, 826, 833}, VertexColors -> 
                  None], 
                 
                 Line3DBox[{531, 809, 1726, 511, 789, 1713, 491, 769, 1699, 
                  1698, 471, 749, 1690, 451, 729, 1677, 431, 709, 1668, 411, 
                  689, 1652, 1651, 391, 669, 1641, 371, 649, 1624, 1623, 351, 
                  629, 1612, 331, 609, 1592, 1591, 311, 589, 1582, 291, 569, 
                  1569, 254, 550, 1562, 252}, VertexColors -> None], 
                 
                 Line3DBox[{534, 812, 1729, 514, 792, 1715, 494, 772, 1701, 
                  474, 752, 1691, 454, 1511, 732, 1679, 434, 712, 1669, 414, 
                  1481, 692, 1654, 394, 672, 1642, 374, 1453, 652, 1626, 354, 
                  632, 1613, 334, 612, 1594, 314, 592, 1583, 294, 1398, 572, 
                  1571, 260, 553, 1563, 258}, VertexColors -> None], 
                 
                 Line3DBox[{537, 815, 1732, 517, 795, 1717, 497, 775, 1703, 
                  477, 755, 1692, 457, 1515, 735, 1681, 437, 715, 1670, 417, 
                  695, 1656, 397, 675, 1643, 377, 655, 1628, 357, 635, 1614, 
                  337, 615, 1598, 1597, 317, 595, 1584, 297, 1402, 575, 1573, 
                  266, 556, 1564, 264}, VertexColors -> None], 
                 
                 Line3DBox[{540, 818, 1735, 520, 798, 1719, 500, 778, 1705, 
                  480, 758, 1693, 460, 1519, 738, 1683, 440, 718, 1671, 420, 
                  698, 1658, 400, 678, 1644, 380, 658, 1631, 360, 638, 1616, 
                  340, 618, 1602, 1601, 320, 598, 1585, 300, 1406, 578, 1575, 
                  272, 559, 1565, 270}, VertexColors -> None], 
                 
                 Line3DBox[{543, 821, 1738, 523, 801, 1721, 503, 781, 1708, 
                  1707, 483, 761, 1694, 463, 741, 1685, 443, 721, 1672, 423, 
                  701, 1662, 1661, 403, 681, 1646, 383, 661, 1635, 1634, 363, 
                  641, 1618, 343, 621, 1606, 1605, 323, 601, 1586, 303, 581, 
                  1577, 278, 562, 1566, 276}, VertexColors -> None], 
                 
                 Line3DBox[{546, 824, 1741, 526, 804, 1723, 506, 784, 1710, 
                  486, 764, 1695, 466, 1524, 744, 1687, 446, 724, 1674, 426, 
                  1492, 704, 1665, 406, 684, 1648, 386, 1462, 664, 1638, 366, 
                  644, 1620, 346, 624, 1609, 326, 604, 1588, 306, 1413, 584, 
                  1579, 284, 565, 1567, 282}, VertexColors -> 
                  None]}, {}, {}}}, VertexColors -> CompressedData["
1:eJztXXlYjmn7NqKsmbJk38XE2BmM6TIYS2gQIQwfxr6PsVaIMIayNDGE0GfJ
loQsI0qLSFmKIqLtbXnfV/YIvzl+x/30HN/lOI+ne75888f3+fM+Ot73dd3X
fS3neZ333WDcrME/lixRokSsaYkSJiWUf09o89qIpIeJRgp9Q6vz52aTsh5b
+qfT/jZGanY9Nu59uK5wvcLyel4/LzGQx+4xNUvVyCxc71NwdXa3a3p6Ps84
vuz09MJ19wULB5Svo6cRfZYeMQ9JLVyf1O3rvdMr5ZJnhdeLz555VLi+2c8m
503PbLo5wd13otmDwvWLZWq2+2WxjtwDavYbvv1u4Xru9LJLrAIyqFPBsRd9
W90qXK9543XoP9PT6Jbn2m4LVl2lpOudPCMHGKhhlFtPq6qPyXlwVsbY/Aiq
X9o8Y25oDrW3CAp/7pZM4TaPT8ZsDKeJX6d2rftVFjXcNK7kuXsJZG5yb2UX
m8t0ZE7w5iuHMsi8sgUtbx9Hw+/dctgfGkrP96/Pnlc/jd43XfrKo2YY7Tlx
rWGVkZc07VnKa15zFy8Ddezi5dLfUbVnp4bzd33/Xk899w232Zah2nNawILK
DSfrabBlnTuZ89MK13faLlr9/EYujXV9tKKDmWrnP6KjTs9el0PXn7axm/Us
pXD9wpQ5L5xNssmiX8isWt8ma9o5dH/o7N/yMuhN1fnWv71Q7RzWa9rR3ZPT
6f7LPSZ+u67TF/eD7+RMMFK0bZVRFm6pZLDdO2XJ5khaeym4196Oelo0KK9F
nQMpVGZiqwm9xkRQzr7gk05lcsghyuftIJ971Hj9uR8smodT/3XBjS2TdBSg
d9wxRRdPtkG9R9x/GQbtr+WfyJ7jwq75f7FcT2/8B3VpHaTa02NCo1MmpfR0
/JidXcRy1Z5dlzzfmj0wl+bWGFk5pfbjwvXKQx2vzSubQxUSp9Vo/KVq5+yW
wR/eX8oi+zb5tnGL72va2fvxkomV22XSuVZdh6Wcu124PvN88u87ctLpydHR
4yffjytc7+lNMU390mjgqPcPUvKv0HOX8ftv+RvIaVuZVyEej2nAbmfLkBaR
NMvSo+WWxFz6dum0xfNaplAnK59OuubY/sj/tc478k9kT4tTRzwmb8qlwdYX
DpVe9ljTbyc/TE1ZuCqbNrv2u3E8Ro0PVZ+/L7t8WRZ5WLUzdw+6p2nn6XU6
jNo4L5Nc+5Zc09wtvnC9etuB7r/PzKAFj7Muv598E/q5sj5r5Ko7B8el0fVm
c13sZkRB+yP/R/FH+XwUP9F5R/6J7PlNzR0JLyOzyXGrRcl3mx9qxgfbM99V
MaEsin43PbmzIUnTzt8ONwyqdCqTaHxU8Pw+CZrxpMcrb89aX2ZQUFQjrxN7
bmjan/s/ij8o/iufg/IRshs678g/kT2R3051XVfX/Z2OyqXtO2xoqm3napv3
917/6s945+KRdcn8jqafI/sj/0fxB+0Lz7/KOsrvyD4ofiK7If9E9vTucauZ
2Xkd9YlOWbL3H4mads6OGftN+c46CvUeUrNi/B1N+yP/R/uC4j/aL1T/oN//
v/XiXUf2R/uF9hf5A/If5G/IP2G9AfwfnRd0vtB5ROcXnXcUH1A8QfEHxSsU
39B+oX1B9kd2RvZEdkP2QfkF5SOUv3i+Q/kR5VPlc3j+1doXlN+R/ZH/Izsj
/0T2RPUPshuqr1A9xus3VO+h+hDVk8rn8/pTy/7I/5GfIzsjv0X+ieyJ6n/U
L6D+gvcjqH9B/Q7qj7Tsj/wfxR8U/2G9AeInOu/IP5E9Uf+L+mXeX6N+HPXv
yP7I/7XiD/JzFE+QnVF8QH6LzjvyT2RPhP9wvAjhS8j+yP9R/NHqj1D+la0/
UX5H/RfqfxH+gPAfhL8h/HO9XZ8dua2N5PDcJ2tgvPr3baNq9/3OzUjz08xa
OPtkUUb4kfWrvDIo1cHn6ghjLPmZGaNiT4ZSXIVGVG9iOlXYH3c26tIVcu49
8Fyyeaj038v+HrSOPl/re9Hnj62xKTR+hZE+fPl14EDfLHrwD18X+7HptKxt
K48f9l6hDZZb7u4vHwrX0eco6+MP5m20PGokH+PexLNm2TTO6W4Vu7A0WpHZ
NLH5zAjydDE3vg66BNfR5/ynPv/pmbpO6yIMtHraux7Jcaofdl55+FCPJway
C/mwucRX2rh6tZnRBTPGGSijTPPT5+5lfBRPvmPxJMVlk/N+UwPdXBHia/ZW
XXdKaNC9zTY9+fVYtWNhnhqXAheX/jFxo56sJtZrWj5ZXV8lzp0TO3cua2PS
LP+M0yaPTnw+rEBd3yXi4TgWD4fPy+nwzYFc2mHzsJ3lbjUfTRbnfRM77wsq
/Pq5z/wccjd8HjruphpvvUTcuDXhX+OGkgfNWR4MEfHcksXzwK7R4SMqZ5Fv
ru682VRtfCDu9hTf4EeZNGNe/8QD19T60yDiXhcW95S+oCTrC1A+qlD64ND5
rulUsUzTxgmNYgvXZ4j64SmrH5rt6NM6vn8a+VoZRlXP0sa1aoi4nSDiNs+n
RpFPg3bMqeu5PZe6ZCw6Hnj2IQ1bnzb7YNkIuljPfMG5J3rKeVGwceb2R3TI
xPFcyYgI8pjuf8QxK5tadzUkdux3j9pHPXyTVyOcJou801jknc9F3nEcP77a
r865VMXpqueWKQ9pUlSZimtfh1OuqAeGsnqge7na19JXZlINXYINTb9JOd8k
mK/oEkZu2RWH2nhl0eaOMydViL1DKYNmBmwdfZlqJw4ZeeRmOtVy9t63Kv8q
RSy8sfWqXShVbzn+eX49Hd3yo1sRn90mn2oNStbfEFZoH9dckzzTZgYye+O0
+I/+6vl6Mkw3YOttPS0f7Jg0f5l6jsaLeqmA1Uu3Wx43O/elnuaZDNiWlan6
f+9tv03on5RLhpF93uyppY3TIv8P2NFgzQCfbGqxev2j6Epqn6LUh4NYfdjo
ov2CgEwd/XRvgk98utrXjx6UbvhHRR1tcY/LTxqo+ucWUZeeZ3XpjZ8sH1we
nkGPE/cHpVur/UJ54bflmN/yevjqbv/YzO+MFPy669UVI1Lpw6LI0qPcIqmu
U+2lIZUM9O7r2w0Lwh7R9qg29RreiaDZog7vzurwsOgPyTP35tDn7qX9Etsk
U8KPpoOPLgunaivmrO81I5u2lW/vEG2aRHODZk+bF6/yFOXqZa1e/oueflkT
HLAjSt2va9+a7grtpac6PsvftWmizVMMXN0tpuelXOoVVnmL0wN1v56fP5VX
9etcalq1y6+33mrjxu53k1yuJmeTwdfBslqCuo8DMnJ7WLfKJttRPTYMCNfG
h+9/ZhF374aOHtxsuO78XnV//So18u7YSEetPCzLPd/0MQ68lPV37Zv3bpgb
nkGxpZ6WHj9HjUsFnUboelllUL2Lj1ZsG6uNw/86xGVewZk0cp3h9sHSNZoy
BsZnPttjpCfRoS4tbqVSbJRTm7MnI+mF6KdGsn6q1KG8iScC9RQ+xX62g90j
il6081nY3giyvLvUevPZXGrd2Ssro3QK9Rl88XZUTTW+eQ+6XrcgO5fKWFXL
dOmp7teB5o2f5Abn0pn0w/X1Vx5rnrtNpd2OGGJy6NgHr8dejuo+6jwrhT61
yyF9+vXjfTdo8yYoT6FzivAKhMvlCHzvMsP3EE6CzjWq2xE+s3V5Y796/unU
6rctbetUU/ORsXxgcKOm6TQirNqeipVjYBzo+Wuq8dUlI5lYbDM/+zaVQtZ3
/C0xIpIqfekR8tDMSJumexycXCaV6jypZFtnrNrf9evd07RmcA5NePuT05oO
6r60sh8wJXJsDnXONnZ2PK7Ny7waOaZVw8BsuuQZm5c6SN2v++Mmb4p1yqZp
MyIDlvZV9wvVD3tnLx5ucziLzjY73fJ0J3UfVy1Yce7OkCwaZ3pMP7i1No9j
7/7b8rb7dHT80s5pa+up+9t23c60h/Y6ctrlbWNt9TG/w+uKN78H+HfxzSR/
p1UHRpuq+/7A90xFXZ9MGtzJdVL+O20e4Z9Hr97qvi2D9jybkd5ar8b5X07e
7vikewb1vfGj37U01R8QvjEoLKPAziud2tc41LPMATUvdIw2jnndNZ1W394W
SltUPynd7JjPoBrZtM/hs2XtV6h2nn+onf0BfRYt6u4ypuQH1c7oHI0M7Hp8
qHcWNar/c92dL1X7X+9wadzhqVn02jzv3bS52jwRqg9RPkXn1DRyWNLoDTqq
eWbUyDnJ6j4utrv/a9AEHT3Zf7cLjdDmlVC+jhV16TRWl6I4EHhvrsnEtZlU
eXDPrT0vq/G/8ZhXQed/yKTMbhcXWHbT5qHKTixRfapZJm2oG9zx6Ffq+pKs
lVcu/tmfTKjYvprzif/xUP8t64vFvo9j+15G+Ikn8xPkV8gPFb+1ZH6L/Py6
OBdT2blA5widO3RO0blGcQDFDRRnUFxCcUyJew1Z3EO4MYqrKA53EHF7GYvb
A0Wcb8PiPMoLKI+gvIPylJLXBrK8puTBAywPIp5OybMjWJ5FeRnlcZT394g6
IZjVCQhnvifqkMmsDkF1C6pzWoq66CtWF9mJOmq8qKNQ3dVD1GklWZ2mfI5S
19kzvsMg6kBHVgcqdWNLVjd2F3VmIKszlbq0I6tLlbhxhsUNFAfQuUbnlMS5
u8LOHTpHCMdGfQHqI1DfofQpc1ifovQ1p1lfw/sgpW9qxfqmkqLPusz6LMRz
pYs+zsj6OOV714q+b4no+5R11CcqfWUd1le2E33oNdaHKn2rM+tblT63Oetz
lb44ifXFlUUfvZb10f1F392V9d0rRZ+ey/r086Kvj2F9/QuBA1gzHADhBghn
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
RfMeHIdR1jnugfbx/wCl5Qc+
               "], VertexNormals -> CompressedData["
1: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
zpZuj5vdrARiI4ynLj4bCmMuTG9vPOQFdNlb3LYs7jd+VF+ot98edcOhepMw
eHHxbP6MTz6wusmOt5EXfl/3rLyOa/h1eo66UIf3Kjk+hX2v5YM57HuxafZH
+XvtVs0zYuPU2hXNxomd9+6TxxnM66Q7ed00gNdLlxRf3MXsMPbXGGYHVPfU
ku2w8kHuLWa3me4DmN1w88NqA5nd2nM7W/P600Bu55N3t+xj8zLv3+lsXtCp
Sqg8LzZB+zayecztsZXNIz566yzPI8//1dL0D132WZkNe354nrYJ/X19Z73g
pq+bZ0Hvnms3tMpR4SxqkzkO1e+/uIza40k1A869SIMyi3rzA/qrcBy1u+np
Fes9UuCJ37H1RrOLVNcdOD41/b94kJqBznWXnh1jwdfXdknhbBV+pPZkev3e
t3a9gDLnw9Wz9VR4k9r7/xu3Uvs67dPe890vwaIXHg2Svvy+Hll5HcXrORyH
QeE5wZXfi+L3tqocJ94Qxrnq/8a51Pwr7YCRgh0eVtoNvwh2o7pjf8HOOyrn
BfsI85JaOY+4l8+j3o4bbP/ito4z5P2b3eaUPO9pNc6z/YtjfnSV9+/P8sQ/
9y8q7F8U92+4Xgu2f1G3fxt5/1rv1JDXbRD3c0YCLnam6iS2fzHp8BV5/zax
3/Pn/kWF/YsK+xcV9i8q7F9U2L8o7l+dEwvZ/sX4o77y/j3X4LA8ziMctzjE
cYwuHL84evAftn9x0IDO8v6dhI3/3L+osH9R3L+TVniz/YuLj/aS9++ZOany
vPQMu8X2L/7YP1vev2uHesrz6GdXzPwvqjmVdmb+13P6VfncdspIZP4Xj13v
Jvvf8YH4p/9F0f8WZpo2l/wIVuk7U/a/sZ17yX5k4NwrzP/iq3EL9Zn/Dana
YAjzO4THzeF43DOOx7UZuJn5X7xqU132v7tzHsh+zX/uA+YHcfvM0+OZ/71y
4o3sB2dx3G0ox+kacdztfKDsZ9G+V9R35n+v/9NB9rN0fWTldaTrhN8ZC/hd
ULNO8veueXOLfS/emJAvf2/say/mf9Hjvbbsf4tqJMnjDOT400HCozgOtfBr
OfO/mL1kH7MDJnbsK9vhYbiuNrNb/aNLZf+blmz2p/9F0f8WD/nC/C9e6TRY
9r++7WLlefnnXa1WbB6NeqvJ/vdwKsrzuNmg12Ep7sKr7iODWfys2d5Wjrt+
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
/is8HxWerzo3SKckrh9jhf6NpHshHQzpX/Yr9HUkHYW43khHQboKqp8L84sK
86s6N4jnTbxv4nv3V+gPKaw3VFhvqnOD+qdQPxXqo0J8YtHfkU6A+l6QXkDV
H4H3S6A+CaSrJ5096etJj036bNJlkw6QdL2kByT9p+hfhPtV+kHSm5H+jHRn
pFMi3RLplUjfQnoX0rkIv1eljyA+PfHriVcv2E11blN/Geo3Q31miL9L/WaI
x0v9a6ifDfWxWaXQf5L6jIhxoKhHI/yR+lZQHwvqX0F9K6iPBfEVqQ8C9UWg
fgi7FfpVkq6edPakryceFensiU9FOm3SbZNem3g5wQJeSbpfWg+k/131376X
asT3IB0p6UpJT0q8gSMCjkm6RNIpkj6RdImkUyR9IuncSPdGerfdCv0zSTdF
OirST5FuinRUhJeRDkeMe98p9NskXQfpPEjfYafQh5N0AqQbIL1AsEJ/Tupz
RH2PqN8R9UWiPknUH4n62lCfG+pvQ/1QqD8K9UWhPhrUV4P6aVD/BerHQH0Y
SLdPOn7S75Pem9YD6b5JJ0y6YdILk76U9KakMyVdIukUSZ9IejbSt5GujXRQ
lFeSHor0M6SnIR0N6S5Ih0H6C+oDRX2hqB8U4SjE3yd9Dek0xPoS1eWp7xTV
50mXRX2GSJ/VRsA9iU9OfWqobw31qyFe8gKhLkp9T6gPCvU/ITyU+qAQbkh9
NKivBvXTIN4G9dUg/gbpuqlPA+m7Cd9sL+CkpPOn9UB6f6G/qBrxu4Tno8Lz
Vfgp6ZBJl0x6ZGH8Kv4J6VpJ50r6VsE+KlyVdJKkmyS9pGB/VV1UmF9UmF+V
XoB0XKTrIj2XsN5QYb2hwnpT4UHUj4z6k1FfMupfRv3MqI8Z9bES6/ak/6R+
SKQDpb451EeH+udQvxXqv0J9V6hPB/XtoH4d1N+B1gP1eaC+ANQngPoDkJ6c
9OWkKycdMumSSY8sjF+lYyXdI+kgSf9IejnSz5FujnRWpLsivRX1caO+btTP
jfp/vRFwKNLNUh8p0s9SvyHqP0R9h6hPDfWtoX411N+E+p1QnxPqi0H2pP4Y
1E+B+itQXwXS4ZMun/T4pN8mPTfpuIXxq/S/pBfNEnAo0hmS7pD0hoT/ER5I
OCDpYUgfM4DrYohnT7x74tsTf3eboAsjXmA1QedFfCMHzj+qx3lHxGPw5ryG
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
Haij/Sktb3Uafmh0TOZ1tFPo4/o/Ebq1gA==
               "]], 
             Method -> {
              "ShrinkWrap" -> False, "DefaultBoundaryStyle" -> Directive[
                 GrayLevel[0.3]], "RotationControl" -> "Globe"}, {
             BoxRatios -> Automatic, DisplayFunction -> Identity, 
              Ticks -> {Automatic, Automatic, Automatic}, FaceGrids -> None, 
              DisplayFunction -> Identity, Axes -> True, AxesLabel -> {
                FormBox[
                 TagBox["a", HoldForm], TraditionalForm], 
                FormBox[
                 TagBox["x", HoldForm], TraditionalForm], None}, 
              AxesOrigin -> {Automatic, Automatic, Automatic}, AxesStyle -> 
              Directive[
                GrayLevel[0.65], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], BaseStyle -> Automatic, BoxRatios -> {1, 1, 0.4}, 
              BoxStyle -> GrayLevel[0, 0.35], DisplayFunction :> Identity, 
              FaceGridsStyle -> Automatic, ImageSize -> {330.}, Lighting -> 
              "Neutral", Method -> {"DefaultBoundaryStyle" -> Directive[
                  GrayLevel[0.3]], "RotationControl" -> "Globe"}, 
              PlotRange -> {{-0.9999998571428571, 
               0.9999998571428571}, {-0.9999998571428571, 
               0.9999998571428571}, {-0.9999997142857346, 
               0.9999997142857346}}, PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02], 
                Scaled[0.02]}, Ticks -> {Automatic, Automatic, Automatic}}, 
             Method -> {"ResolveAsTriangles" -> False}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "3DMathPlot"}, {}], "\n "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"ContourPlot[a x, {a, -1., 1.}, {x, -1., 1.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max22018$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`max22020$$ = 
                 0.5, CalculateUtilities`GraphicsUtilities`Private`min22017$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min22019$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min22017$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max22018$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min22019$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max22020$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5970428$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min22017$\
5970429$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max22018$\
5970430$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`min22019$\
5970431$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max22020$\
5970436$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max22018$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
max22020$$ = 0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min22017$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min22019$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5970428$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min22017$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min22017$\
5970429$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max22018$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`max22018$\
5970430$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min22019$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min22019$\
5970431$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max22020$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max22020$\
5970436$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    ContourPlot[$CellContext`a $CellContext`x, \
{$CellContext`a, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min22017$$], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min22017$$], \
-1.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min22017$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max22018$$]], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min22017$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max22018$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min22017$$ + 
                    0.002, CalculateUtilities`GraphicsUtilities`Private`\
max22018$$]], 1.]}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min22019$$], 
                    (Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min22019$$], \
-1.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min22019$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max22020$$]], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min22019$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max22020$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min22019$$ + 
                    0.002, CalculateUtilities`GraphicsUtilities`Private`\
max22020$$]], 1.]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], 
                    RawBoxes[
                    FormBox["x", TraditionalForm]]}, AspectRatio -> Automatic,
                     ImageSize -> {330.}, ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min22017$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max22018$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min22019$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max22020$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMGAwQH5CADsakASUp3+\
vFl9TCtYPtbIM/Dz67SZq1qxTTAZrSD6f60jy+e+656z04kFHa7/V6+\
qI1HySn6RU83bdmKGe5LAR9d5wr0JpJkV7AZ9eticHsACc/\
gHrfZWveSzUjxp9f4fuEJwUnBr4axplhoCe7iuRTlujaM1Ls0P5kwmVCOPsJD5+9fPF4e+\
u5h8FYRsQYUEI/bQuZTxXRkPYQ6JI1bzkR3/zxXnn8VHAew/cCRAL6jvWOFaEWRgrCMZ/\
gW883UzcxMUMEJYqeOU1OnsO2F2ijmMjGMMvxjdPJ2moLTFSmPTe3Sm7WKciHfxUfyNjF5D0uaXd2B\
IaFcc7oOymrf87dAM+v28IrebSaOMzvDUfeiGGHoJfpfNS6Tp6Rqmtd9HOuzmq+bDTI06dM/b+\
0z7RZDuNJ2zBgdmBrvFp7y/DbbeFljl0/F/\
dtaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5UfMfoDKlghRPZOMt+\
cf1xtwKvN4UYazfZgHREPQMiyMG6qON2h2XMDKdEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2UsX6k5MMv3yR8Wt5HKiyZD3PWEgA7VW9NewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpVqC7lWRy40hyHJ9EvC7wPIjPT5o4dOLqC2xazieRRrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DUa6uJ4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "ContourPlot"}, {}], "\n "}]}],
    Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "plot", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "PlotsWord", "desc" -> "a plotting function", "input" -> 
          "*C.plot-_*PlotsWord-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "GeometryProperty", "desc" -> " referring to geometry", 
          "input" -> "*C.plot-_*GeometryProperty-"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "plot y = a*x", "score" -> "0.6666666666666666", "level" -> 
        "high"}, {}]}]}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "5.9110000000000005", "parsetiming" -> "0.464", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP105391d3i98ffdif8idhh00003525c0d4g03i4ba2", "host" -> 
    "https://www4c.wolframalpha.com", "server" -> "22", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2019, 12, 21, 15, 31, 34.1421128`9.285865289271486}, "Line" -> 
    11, "SessionID" -> 33550833293597817403}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "GeometricFigure (ofBoundary)", "Geometric figure", 1, 1, "Content"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "a = 2, plot y = a*x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{145., {47., 18.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[11]:=",ExpressionUUID->"a260a2f5-370c-4ddf-b1cf-db09ad7349ff"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox["\<\"line\"\>",
     TraditionalForm], "Output",
    CellSize->{550, Automatic},
    AutoStyleOptions->{"HighlightFormattingErrors"->False},
    ScriptLevel->0,
    NumberPoint->".",
    RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
    FontFamily->"Times",
    FontSize->14,
    Background->None,
    GraphicsBoxOptions->{DefaultAxesStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"],
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics"},
    DefaultFrameStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"],
    DefaultFrameTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
    DefaultTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
    Graphics3DBoxOptions->{
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "a = 2, plot y = a*x", {{"GeometricFigure (ofBoundary)", 1}, 
    "Content"}]]], "Output",
 CellChangeTimes->{3.785927500364422*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"aed6a81a-a1a4-4b0a-9512-8b39b0734798"]
}, Open  ]],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "f[A, R, V, a, b, T, Y, t] = (A R V (b (a + b) (a E^(-(t/T)) T - \
E^(-(t/Y)) (a T + b (T - Y)) + \n        b E^(-(((a + b) t)/(b Y))) (T - Y)) \
Y - \n     a (a (a + b) E^(-(t/T)) T^2 - \n        a (a T + b (T - Y)) (T - \
Y) - (a + b) E^(-(t/Y)) (a T + b (T - Y)) Y +\n         b^2 E^(-(((a + b) \
t)/(b Y))) (T - Y) Y) - \n     b (a + b) (a E^((q - t)/T) T - E^((q - t)/Y) \
(a T + b (T - Y)) + \n        b E^(((a + b) (q - t))/(b Y)) (T - Y)) Y \
HeavisideTheta[-q + t] + \n     a (a (a + b) E^((q - t)/T) T^2 - \n        a \
(a T + b (T - Y)) (T - Y) - (a + b) E^((q - t)/\n         Y) (a T + b (T - \
Y)) Y + \n        b^2 E^(((a + b) (q - t))/(b Y)) (T - Y) Y) \
HeavisideTheta[-q + \n        t]))/(a (a + b) r (a T + b (T - Y)) (T - Y))", 
   Typeset`newq$$ = 
   "f[A, R, V, a, b, T, Y, t] = (A R V (b (a + b) (a E^(-(t/T)) T - \
E^(-(t/Y)) (a T + b (T - Y)) + \n        b E^(-(((a + b) t)/(b Y))) (T - Y)) \
Y - \n     a (a (a + b) E^(-(t/T)) T^2 - \n        a (a T + b (T - Y)) (T - \
Y) - (a + b) E^(-(t/Y)) (a T + b (T - Y)) Y +\n         b^2 E^(-(((a + b) \
t)/(b Y))) (T - Y) Y) - \n     b (a + b) (a E^((q - t)/T) T - E^((q - t)/Y) \
(a T + b (T - Y)) + \n        b E^(((a + b) (q - t))/(b Y)) (T - Y)) Y \
HeavisideTheta[-q + t] + \n     a (a (a + b) E^((q - t)/T) T^2 - \n        a \
(a T + b (T - Y)) (T - Y) - (a + b) E^((q - t)/\n         Y) (a T + b (T - \
Y)) Y + \n        b^2 E^(((a + b) (q - t))/(b Y)) (T - Y) Y) \
HeavisideTheta[-q + \n        t]))/(a (a + b) r (a T + b (T - Y)) (T - Y))"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"",DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm]],"\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{13., {4., 9.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", 
              "f[A, R, V, a, b, T, Y, t] = (A R V (b (a + b) (a E^(-(t/T)) T \
- E^(-(t/Y)) (a T + b (T - Y)) + \n        b E^(-(((a + b) t)/(b Y))) (T - \
Y)) Y - \n     a (a (a + b) E^(-(t/T)) T^2 - \n        a (a T + b (T - Y)) (T \
- Y) - (a + b) E^(-(t/Y)) (a T + b (T - Y)) Y +\n         b^2 E^(-(((a + b) \
t)/(b Y))) (T - Y) Y) - \n     b (a + b) (a E^((q - t)/T) T - E^((q - t)/Y) \
(a T + b (T - Y)) + \n        b E^(((a + b) (q - t))/(b Y)) (T - Y)) Y \
HeavisideTheta[-q + t] + \n     a (a (a + b) E^((q - t)/T) T^2 - \n        a \
(a T + b (T - Y)) (T - Y) - (a + b) E^((q - t)/\n         Y) (a T + b (T - \
Y)) Y + \n        b^2 E^(((a + b) (q - t))/(b Y)) (T - Y) Y) \
HeavisideTheta[-q + \n        t]))/(a (a + b) r (a T + b (T - Y)) (T - Y))"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[12]:=",ExpressionUUID->"96072a50-946d-4029-9c08-3839ea69e66d"],

Cell[CellGroupData[{

Cell["\<\
f[A, R, V, a, b, T, Y, t] = (A R V (b (a + b) (a E^(-(t/T)) T - E^(-(t/Y)) (a \
T + b (T - Y)) + 
        b E^(-(((a + b) t)/(b Y))) (T - Y)) Y - 
     a (a (a + b) E^(-(t/T)) T^2 - 
        a (a T + b (T - Y)) (T - Y) - (a + b) E^(-(t/Y)) (a T + b (T - Y)) Y +
         b^2 E^(-(((a + b) t)/(b Y))) (T - Y) Y) - 
     b (a + b) (a E^((q - t)/T) T - E^((q - t)/Y) (a T + b (T - Y)) + 
        b E^(((a + b) (q - t))/(b Y)) (T - Y)) Y HeavisideTheta[-q + t] + 
     a (a (a + b) E^((q - t)/T) T^2 - 
        a (a T + b (T - Y)) (T - Y) - (a + b) E^((q - t)/
         Y) (a T + b (T - Y)) Y + 
        b^2 E^(((a + b) (q - t))/(b Y)) (T - Y) Y) HeavisideTheta[-q + 
        t]))/(a (a + b) r (a T + b (T - Y)) (T - Y))\
\>", "WolframAlphaLong",
 CellChangeTimes->{3.7859277099421067`*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"e0b07fc2-31ec-4f67-a4cd-aac2df2ff55e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "f[A, R, V, a, b, T, Y, t] = (A R V (b (a + b) (a E^(-(t/T)) T - \
E^(-(t/Y)) (a T + b (T - Y)) + \n        b E^(-(((a + b) t)/(b Y))) (T - Y)) \
Y - \n     a (a (a + b) E^(-(t/T)) T^2 - \n        a (a T + b (T - Y)) (T - \
Y) - (a + b) E^(-(t/Y)) (a T + b (T - Y)) Y +\n         b^2 E^(-(((a + b) \
t)/(b Y))) (T - Y) Y) - \n     b (a + b) (a E^((q - t)/T) T - E^((q - t)/Y) \
(a T + b (T - Y)) + \n        b E^(((a + b) (q - t))/(b Y)) (T - Y)) Y \
HeavisideTheta[-q + t] + \n     a (a (a + b) E^((q - t)/T) T^2 - \n        a \
(a T + b (T - Y)) (T - Y) - (a + b) E^((q - t)/\n         Y) (a T + b (T - \
Y)) Y + \n        b^2 E^(((a + b) (q - t))/(b Y)) (T - Y) Y) \
HeavisideTheta[-q + \n        t]))/(a (a + b) r (a T + b (T - Y)) (T - Y))", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["tips", {"count" -> "2"}, {"\n  ", 
      XMLElement[
      "tip", {"text" -> "Avoid concatenation in math expressions"}, {}], 
      "\n  ", 
      XMLElement[
      "tip", {"text" -> 
        "Use r*x rather than rx, and q*x^2 rather than qx2"}, {}], "\n "}]}, 
   Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "false", "error" -> "false", "numpods" -> "0", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "4.126", 
    "parsetiming" -> "0.008", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "", "parseidserver" -> "37", "host" -> 
    "https://www4d.wolframalpha.com", "server" -> "37", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2019, 12, 21, 15, 35, 16.9075255`8.980654996622087}, "Line" -> 
    13, "SessionID" -> 33550833293597817403}, Typeset`showpods$$ = {}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "f[A, R, V, a, b, T, Y, t] = (A R V (b (a + b) (a E^(-(t/T)) T - \
E^(-(t/Y)) (a T + b (T - Y)) + \n        b E^(-(((a + b) t)/(b Y))) (T - Y)) \
Y - \n     a (a (a + b) E^(-(t/T)) T^2 - \n        a (a T + b (T - Y)) (T - \
Y) - (a + b) E^(-(t/Y)) (a T + b (T - Y)) Y +\n         b^2 E^(-(((a + b) \
t)/(b Y))) (T - Y) Y) - \n     b (a + b) (a E^((q - t)/T) T - E^((q - t)/Y) \
(a T + b (T - Y)) + \n        b E^(((a + b) (q - t))/(b Y)) (T - Y)) Y \
HeavisideTheta[-q + t] + \n     a (a (a + b) E^((q - t)/T) T^2 - \n        a \
(a T + b (T - Y)) (T - Y) - (a + b) E^((q - t)/\n         Y) (a T + b (T - \
Y)) Y + \n        b^2 E^(((a + b) (q - t))/(b Y)) (T - Y) Y) \
HeavisideTheta[-q + \n        t]))/(a (a + b) r (a T + b (T - Y)) (T - Y))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {}, {}, Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, 
        Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{690., {43., 49.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.785927716912508*^9},ExpressionUUID->"98923e5d-b0a5-46ff-a179-\
a4bb61295def"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{
     "A", ",", "R", ",", " ", "r", ",", " ", "V", ",", " ", "a", ",", " ", 
      "b", ",", " ", "T", ",", " ", "Y", ",", " ", "t"}], "]"}], " ", "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"A", " ", "R", " ", "V", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"b", " ", 
          RowBox[{"(", 
           RowBox[{"a", " ", "+", " ", "b"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", 
             RowBox[{"E", "^", 
              RowBox[{"(", 
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{"t", "/", "T"}], ")"}]}], ")"}]}], " ", "T"}], " ", 
            "-", " ", 
            RowBox[{
             RowBox[{"E", "^", 
              RowBox[{"(", 
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{"t", "/", "Y"}], ")"}]}], ")"}]}], " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"a", " ", "T"}], " ", "+", " ", 
               RowBox[{"b", " ", 
                RowBox[{"(", 
                 RowBox[{"T", " ", "-", " ", "Y"}], ")"}]}]}], ")"}]}], " ", 
            "+", " ", "\n", "        ", 
            RowBox[{"b", " ", 
             RowBox[{"E", "^", 
              RowBox[{"(", 
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", " ", "+", " ", "b"}], ")"}], " ", "t"}], 
                   ")"}], "/", 
                  RowBox[{"(", 
                   RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], ")"}]}], " ", 
             RowBox[{"(", 
              RowBox[{"T", " ", "-", " ", "Y"}], ")"}]}]}], ")"}], " ", "Y"}],
          " ", "-", " ", "\n", "     ", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", 
             RowBox[{"(", 
              RowBox[{"a", " ", "+", " ", "b"}], ")"}], " ", 
             RowBox[{"E", "^", 
              RowBox[{"(", 
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{"t", "/", "T"}], ")"}]}], ")"}]}], " ", 
             RowBox[{"T", "^", "2"}]}], " ", "-", " ", "\n", "        ", 
            RowBox[{"a", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"a", " ", "T"}], " ", "+", " ", 
               RowBox[{"b", " ", 
                RowBox[{"(", 
                 RowBox[{"T", " ", "-", " ", "Y"}], ")"}]}]}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"T", " ", "-", " ", "Y"}], ")"}]}], " ", "-", " ", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"a", " ", "+", " ", "b"}], ")"}], " ", 
             RowBox[{"E", "^", 
              RowBox[{"(", 
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{"t", "/", "Y"}], ")"}]}], ")"}]}], " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"a", " ", "T"}], " ", "+", " ", 
               RowBox[{"b", " ", 
                RowBox[{"(", 
                 RowBox[{"T", " ", "-", " ", "Y"}], ")"}]}]}], ")"}], " ", 
             "Y"}], " ", "+", "\n", "         ", 
            RowBox[{
             RowBox[{"b", "^", "2"}], " ", 
             RowBox[{"E", "^", 
              RowBox[{"(", 
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", " ", "+", " ", "b"}], ")"}], " ", "t"}], 
                   ")"}], "/", 
                  RowBox[{"(", 
                   RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], ")"}]}], " ", 
             RowBox[{"(", 
              RowBox[{"T", " ", "-", " ", "Y"}], ")"}], " ", "Y"}]}], ")"}]}],
          " ", "-", " ", "\n", "     ", 
         RowBox[{"b", " ", 
          RowBox[{"(", 
           RowBox[{"a", " ", "+", " ", "b"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", 
             RowBox[{"E", "^", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"q", " ", "-", " ", "t"}], ")"}], "/", "T"}], 
               ")"}]}], " ", "T"}], " ", "-", " ", 
            RowBox[{
             RowBox[{"E", "^", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"q", " ", "-", " ", "t"}], ")"}], "/", "Y"}], 
               ")"}]}], " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"a", " ", "T"}], " ", "+", " ", 
               RowBox[{"b", " ", 
                RowBox[{"(", 
                 RowBox[{"T", " ", "-", " ", "Y"}], ")"}]}]}], ")"}]}], " ", 
            "+", " ", "\n", "        ", 
            RowBox[{"b", " ", 
             RowBox[{"E", "^", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"a", " ", "+", " ", "b"}], ")"}], " ", 
                  RowBox[{"(", 
                   RowBox[{"q", " ", "-", " ", "t"}], ")"}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], " ", 
             RowBox[{"(", 
              RowBox[{"T", " ", "-", " ", "Y"}], ")"}]}]}], ")"}], " ", "Y", 
          " ", 
          RowBox[{"HeavisideTheta", "[", 
           RowBox[{
            RowBox[{"-", "q"}], " ", "+", " ", "t"}], "]"}]}], " ", "+", " ", 
         "\n", "     ", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", 
             RowBox[{"(", 
              RowBox[{"a", " ", "+", " ", "b"}], ")"}], " ", 
             RowBox[{"E", "^", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"q", " ", "-", " ", "t"}], ")"}], "/", "T"}], 
               ")"}]}], " ", 
             RowBox[{"T", "^", "2"}]}], " ", "-", " ", "\n", "        ", 
            RowBox[{"a", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"a", " ", "T"}], " ", "+", " ", 
               RowBox[{"b", " ", 
                RowBox[{"(", 
                 RowBox[{"T", " ", "-", " ", "Y"}], ")"}]}]}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"T", " ", "-", " ", "Y"}], ")"}]}], " ", "-", " ", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"a", " ", "+", " ", "b"}], ")"}], " ", 
             RowBox[{"E", "^", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"q", " ", "-", " ", "t"}], ")"}], "/", "\n", 
                "         ", "Y"}], ")"}]}], " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"a", " ", "T"}], " ", "+", " ", 
               RowBox[{"b", " ", 
                RowBox[{"(", 
                 RowBox[{"T", " ", "-", " ", "Y"}], ")"}]}]}], ")"}], " ", 
             "Y"}], " ", "+", " ", "\n", "        ", 
            RowBox[{
             RowBox[{"b", "^", "2"}], " ", 
             RowBox[{"E", "^", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"a", " ", "+", " ", "b"}], ")"}], " ", 
                  RowBox[{"(", 
                   RowBox[{"q", " ", "-", " ", "t"}], ")"}]}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], " ", 
             RowBox[{"(", 
              RowBox[{"T", " ", "-", " ", "Y"}], ")"}], " ", "Y"}]}], ")"}], 
          " ", 
          RowBox[{"HeavisideTheta", "[", 
           RowBox[{
            RowBox[{"-", "q"}], " ", "+", " ", "\n", "        ", "t"}], 
           "]"}]}]}], ")"}]}], ")"}], "/", 
     RowBox[{"(", 
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{"a", " ", "+", " ", "b"}], ")"}], " ", "r", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", "T"}], " ", "+", " ", 
         RowBox[{"b", " ", 
          RowBox[{"(", 
           RowBox[{"T", " ", "-", " ", "Y"}], ")"}]}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"T", " ", "-", " ", "Y"}], ")"}]}], ")"}]}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"plot", " ", 
    RowBox[{"f", "[", 
     RowBox[{"{", 
      RowBox[{
      "6.8", ",", " ", "475", ",", " ", "26", ",", " ", "1", ",", " ", "68", 
       ",", " ", "670", ",", " ", "214", ",", " ", "15.6", ",", " ", "t"}], 
      "}"}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.785927712203059*^9, 3.7859277643297615`*^9}, {
  3.7859278074457264`*^9, 
  3.7859278812268977`*^9}},ExpressionUUID->"35e67678-4750-46cc-8984-\
29229bf6d907"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"A", " ", "R", " ", "V", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox["t", "T"]}]], " ", "T"}], "-", 
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox["t", "Y"]}]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
         RowBox[{"b", " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox[
             RowBox[{
              RowBox[{"(", 
               RowBox[{"a", "+", "b"}], ")"}], " ", "t"}], 
             RowBox[{"b", " ", "Y"}]]}]], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "-", 
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox["t", "T"]}]], " ", 
          SuperscriptBox["T", "2"]}], "-", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox["t", "Y"]}]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "+", 
         RowBox[{
          SuperscriptBox["b", "2"], " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox[
             RowBox[{
              RowBox[{"(", 
               RowBox[{"a", "+", "b"}], ")"}], " ", "t"}], 
             RowBox[{"b", " ", "Y"}]]}]], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", "Y"}]}], ")"}]}], "-", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{"q", "-", "t"}], "T"]], " ", "T"}], "-", 
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{"q", "-", "t"}], "Y"]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
         RowBox[{"b", " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{
             RowBox[{"(", 
              RowBox[{"a", "+", "b"}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}]}], 
            RowBox[{"b", " ", "Y"}]]], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y", " ", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{
         RowBox[{"-", "q"}], "+", "t"}], "]"}]}], "+", 
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{"q", "-", "t"}], "T"]], " ", 
          SuperscriptBox["T", "2"]}], "-", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{"q", "-", "t"}], "Y"]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "+", 
         RowBox[{
          SuperscriptBox["b", "2"], " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{
             RowBox[{"(", 
              RowBox[{"a", "+", "b"}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}]}], 
            RowBox[{"b", " ", "Y"}]]], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", "Y"}]}], ")"}], " ", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{
         RowBox[{"-", "q"}], "+", "t"}], "]"}]}]}], ")"}]}], ")"}], "/", 
  RowBox[{"(", 
   RowBox[{"a", " ", 
    RowBox[{"(", 
     RowBox[{"a", "+", "b"}], ")"}], " ", "r", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"a", " ", "T"}], "+", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"T", "-", "Y"}], ")"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.785927873150484*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"23b54096-d458-466e-bf7c-59afa5db61aa"],

Cell[BoxData[
 RowBox[{"plot", " ", 
  RowBox[{"f", "[", 
   RowBox[{"{", 
    RowBox[{
    "6.8`", ",", "475", ",", "26", ",", "1", ",", "68", ",", "670", ",", 
     "214", ",", "15.6`", ",", "t"}], "}"}], "]"}]}]], "Output",
 CellChangeTimes->{3.7859278731634216`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"43f2185e-74cf-40d0-bc18-5fc8abb6cc2a"]
}, Open  ]],

Cell["", "WolframAlphaShort",
 CellChangeTimes->{{3.785928014300458*^9, 
  3.7859280363695292`*^9}},ExpressionUUID->"71fcbd1d-b128-4cd1-948f-\
2905d2833f90"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"A", " ", "R", " ", "V", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"t", "/", "T"}], ")"}]}], ")"}]}], " ", "T"}], "-", 
         RowBox[{
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"t", "/", "Y"}], ")"}]}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
         RowBox[{"b", " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a", "+", "b"}], ")"}], " ", "t"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "-", 
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"t", "/", "T"}], ")"}]}], ")"}]}], " ", 
          RowBox[{"T", "^", "2"}]}], "-", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"t", "/", "Y"}], ")"}]}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "+", 
         RowBox[{
          RowBox[{"b", "^", "2"}], " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a", "+", "b"}], ")"}], " ", "t"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", "Y"}]}], ")"}]}], "-", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}], "/", "T"}], ")"}]}], " ", "T"}],
          "-", 
         RowBox[{
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}], "/", "Y"}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
         RowBox[{"b", " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a", "+", "b"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}]}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y", " ", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{
         RowBox[{"-", "q"}], "+", "t"}], "]"}]}], "+", 
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}], "/", "T"}], ")"}]}], " ", 
          RowBox[{"T", "^", "2"}]}], "-", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}], "/", "Y"}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "+", 
         RowBox[{
          RowBox[{"b", "^", "2"}], " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a", "+", "b"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}]}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", "Y"}]}], ")"}], " ", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{
         RowBox[{"-", "q"}], "+", "t"}], "]"}]}]}], ")"}]}], ")"}], "/", 
  RowBox[{"(", 
   RowBox[{"a", " ", 
    RowBox[{"(", 
     RowBox[{"a", "+", "b"}], ")"}], " ", "r", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"a", " ", "T"}], "+", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"T", "-", "Y"}], ")"}]}], ")"}]}]], "WolframAlphaShort",
 CellChangeTimes->{{3.7859280328818474`*^9, 
  3.785928056672967*^9}},ExpressionUUID->"2d10949b-679c-4cdd-b69b-\
21408fab359e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"A", " ", "R", " ", "V", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"t", "/", "T"}], ")"}]}], ")"}]}], " ", "T"}], "-", 
         RowBox[{
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"t", "/", "Y"}], ")"}]}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
         RowBox[{"b", " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a", "+", "b"}], ")"}], " ", "t"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "-", 
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"t", "/", "T"}], ")"}]}], ")"}]}], " ", 
          RowBox[{"T", "^", "2"}]}], "-", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"t", "/", "Y"}], ")"}]}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "+", 
         RowBox[{
          RowBox[{"b", "^", "2"}], " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a", "+", "b"}], ")"}], " ", "t"}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", "Y"}]}], ")"}]}], "-", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}], "/", "T"}], ")"}]}], " ", "T"}],
          "-", 
         RowBox[{
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}], "/", "Y"}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
         RowBox[{"b", " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a", "+", "b"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}]}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y", " ", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{
         RowBox[{"-", "q"}], "+", "t"}], "]"}]}], "+", 
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}], "/", "T"}], ")"}]}], " ", 
          RowBox[{"T", "^", "2"}]}], "-", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}], "/", "Y"}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "+", 
         RowBox[{
          RowBox[{"b", "^", "2"}], " ", 
          RowBox[{"E", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a", "+", "b"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}]}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", "Y"}]}], ")"}], " ", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{
         RowBox[{"-", "q"}], "+", "t"}], "]"}]}]}], ")"}]}], ")"}], "/", 
  RowBox[{"(", 
   RowBox[{"a", " ", 
    RowBox[{"(", 
     RowBox[{"a", "+", "b"}], ")"}], " ", "r", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"a", " ", "T"}], "+", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"T", "-", "Y"}], ")"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.7859280749291573`*^9, 
  3.785928074936178*^9}},ExpressionUUID->"ec2c9de2-ac0b-4fe1-af6d-\
464adea1bbe2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\\", "frac"}], 
  RowBox[{"{", 
   RowBox[{"A", " ", "R", " ", 
    RowBox[{"V", "\\", "left"}], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"a", "\\", "theta"}], " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"t", "-", "q"}], ")"}], "\\", "left"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"b", "^", "2"}], " ", "Y", " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", 
          RowBox[{"e", "^", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\\", "frac"}], 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a", "+", "b"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}]}], "}"}], 
             RowBox[{"{", 
              RowBox[{"b", " ", "Y"}], "}"}]}], "}"}]}]}], "+", 
         RowBox[{"a", " ", 
          RowBox[{"T", "^", "2"}], " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          RowBox[{"e", "^", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\\", "frac"}], 
             RowBox[{"{", 
              RowBox[{"q", "-", "t"}], "}"}], 
             RowBox[{"{", "T", "}"}]}], "}"}]}]}], "-", 
         RowBox[{"Y", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          RowBox[{"e", "^", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\\", "frac"}], 
             RowBox[{"{", 
              RowBox[{"q", "-", "t"}], "}"}], 
             RowBox[{"{", "Y", "}"}]}], "}"}]}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "-", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], "\\r", "ight"}]}], 
        ")"}]}], "-", 
      RowBox[{
       RowBox[{"a", "\\", "left"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"b", "^", "2"}], " ", "Y", " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", 
          RowBox[{"e", "^", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"\\", "frac"}]}], 
             RowBox[{"{", 
              RowBox[{"t", " ", 
               RowBox[{"(", 
                RowBox[{"a", "+", "b"}], ")"}]}], "}"}], 
             RowBox[{"{", 
              RowBox[{"b", " ", "Y"}], "}"}]}], "}"}]}]}], "+", 
         RowBox[{"a", " ", 
          RowBox[{"T", "^", "2"}], " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          RowBox[{"e", "^", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"\\", "frac"}]}], 
             RowBox[{"{", "t", "}"}], 
             RowBox[{"{", "T", "}"}]}], "}"}]}]}], "-", 
         RowBox[{"Y", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          RowBox[{"e", "^", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"\\", "frac"}]}], 
             RowBox[{"{", "t", "}"}], 
             RowBox[{"{", "Y", "}"}]}], "}"}]}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "-", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], "\\r", "ight"}]}], 
        ")"}]}], "-", 
      RowBox[{"b", " ", "Y", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"a", "+", "b"}], ")"}], "\\", "theta"}], " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"t", "-", "q"}], ")"}], "\\", "left"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", 
           RowBox[{"e", "^", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\\", "frac"}], 
              RowBox[{"{", 
               RowBox[{"q", "-", "t"}], "}"}], 
              RowBox[{"{", "Y", "}"}]}], "}"}]}]}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
         RowBox[{"b", " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", 
          RowBox[{"e", "^", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\\", "frac"}], 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"a", "+", "b"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}]}], "}"}], 
             RowBox[{"{", 
              RowBox[{"b", " ", "Y"}], "}"}]}], "}"}]}]}], "+", 
         RowBox[{"a", " ", "T", " ", 
          RowBox[{"e", "^", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\\", "frac"}], 
             RowBox[{"{", 
              RowBox[{"q", "-", "t"}], "}"}], 
             RowBox[{"{", "T", "}"}]}], "}"}]}], "\\r", "ight"}]}], ")"}]}], 
      "+", 
      RowBox[{"b", " ", "Y", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"a", "+", "b"}], ")"}], "\\", "left"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", 
           RowBox[{"e", "^", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", 
               RowBox[{"\\", "frac"}]}], 
              RowBox[{"{", "t", "}"}], 
              RowBox[{"{", "Y", "}"}]}], "}"}]}]}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
         RowBox[{"b", " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", 
          RowBox[{"e", "^", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"\\", "frac"}]}], 
             RowBox[{"{", 
              RowBox[{"t", " ", 
               RowBox[{"(", 
                RowBox[{"a", "+", "b"}], ")"}]}], "}"}], 
             RowBox[{"{", 
              RowBox[{"b", " ", "Y"}], "}"}]}], "}"}]}]}], "+", 
         RowBox[{"a", " ", "T", " ", 
          RowBox[{"e", "^", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", 
              RowBox[{"\\", "frac"}]}], 
             RowBox[{"{", "t", "}"}], 
             RowBox[{"{", "T", "}"}]}], "}"}]}], "\\r", "ight"}]}], ")"}], 
       "\\r", "ight"}]}], ")"}]}], "}"}], 
  RowBox[{"{", 
   RowBox[{"a", " ", "r", " ", 
    RowBox[{"(", 
     RowBox[{"a", "+", "b"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"T", "-", "Y"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"a", " ", "T"}], "+", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.7859281153929987`*^9, 
  3.7859281153989573`*^9}},ExpressionUUID->"7aff58f1-5625-45ad-8242-\
deb6d6e455c7"],

Cell["\<\
print(\"yolo\")
\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.7859290942388935`*^9, 
  3.7859291064562235`*^9}},ExpressionUUID->"f210852a-79e6-4735-ba56-\
76097c044683"],

Cell["", "Text",
 CellChangeTimes->{{3.7859291175665255`*^9, 
  3.785929119910285*^9}},ExpressionUUID->"087946c2-b776-421f-b283-\
37dc9d6edb2d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{
    "A", ",", "R", ",", " ", "r", ",", " ", "V", ",", " ", "a", ",", " ", "b",
      ",", " ", "T", ",", " ", "Y", ",", " ", "t"}], "]"}], " ", "=", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"A", " ", "R", " ", "V", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"b", " ", 
         RowBox[{"(", 
          RowBox[{"a", "+", "b"}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"a", " ", 
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{"-", 
               RowBox[{"(", 
                RowBox[{"t", "/", "T"}], ")"}]}], ")"}]}], " ", "T"}], "-", 
           RowBox[{
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{"-", 
               RowBox[{"(", 
                RowBox[{"t", "/", "Y"}], ")"}]}], ")"}]}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"a", " ", "T"}], "+", 
              RowBox[{"b", " ", 
               RowBox[{"(", 
                RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"b", " ", 
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{"-", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"a", "+", "b"}], ")"}], " ", "t"}], ")"}], "/", 
                 RowBox[{"(", 
                  RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], ")"}]}], " ", 
            RowBox[{"(", 
             RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "-", 
        RowBox[{"a", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"a", " ", 
            RowBox[{"(", 
             RowBox[{"a", "+", "b"}], ")"}], " ", 
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{"-", 
               RowBox[{"(", 
                RowBox[{"t", "/", "T"}], ")"}]}], ")"}]}], " ", 
            RowBox[{"T", "^", "2"}]}], "-", 
           RowBox[{"a", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"a", " ", "T"}], "+", 
              RowBox[{"b", " ", 
               RowBox[{"(", 
                RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{"T", "-", "Y"}], ")"}]}], "-", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"a", "+", "b"}], ")"}], " ", 
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{"-", 
               RowBox[{"(", 
                RowBox[{"t", "/", "Y"}], ")"}]}], ")"}]}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"a", " ", "T"}], "+", 
              RowBox[{"b", " ", 
               RowBox[{"(", 
                RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "+", 
           RowBox[{
            RowBox[{"b", "^", "2"}], " ", 
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{"-", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"a", "+", "b"}], ")"}], " ", "t"}], ")"}], "/", 
                 RowBox[{"(", 
                  RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], ")"}]}], " ", 
            RowBox[{"(", 
             RowBox[{"T", "-", "Y"}], ")"}], " ", "Y"}]}], ")"}]}], "-", 
        RowBox[{"b", " ", 
         RowBox[{"(", 
          RowBox[{"a", "+", "b"}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"a", " ", 
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}], "/", "T"}], ")"}]}], " ", 
            "T"}], "-", 
           RowBox[{
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}], "/", "Y"}], ")"}]}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"a", " ", "T"}], "+", 
              RowBox[{"b", " ", 
               RowBox[{"(", 
                RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
           RowBox[{"b", " ", 
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a", "+", "b"}], ")"}], " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "-", "t"}], ")"}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], " ", 
            RowBox[{"(", 
             RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y", " ", 
         RowBox[{"HeavisideTheta", "[", 
          RowBox[{
           RowBox[{"-", "q"}], "+", "t"}], "]"}]}], "+", 
        RowBox[{"a", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"a", " ", 
            RowBox[{"(", 
             RowBox[{"a", "+", "b"}], ")"}], " ", 
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}], "/", "T"}], ")"}]}], " ", 
            RowBox[{"T", "^", "2"}]}], "-", 
           RowBox[{"a", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"a", " ", "T"}], "+", 
              RowBox[{"b", " ", 
               RowBox[{"(", 
                RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{"T", "-", "Y"}], ")"}]}], "-", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"a", "+", "b"}], ")"}], " ", 
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"q", "-", "t"}], ")"}], "/", "Y"}], ")"}]}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"a", " ", "T"}], "+", 
              RowBox[{"b", " ", 
               RowBox[{"(", 
                RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "+", 
           RowBox[{
            RowBox[{"b", "^", "2"}], " ", 
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a", "+", "b"}], ")"}], " ", 
                 RowBox[{"(", 
                  RowBox[{"q", "-", "t"}], ")"}]}], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"b", " ", "Y"}], ")"}]}], ")"}]}], " ", 
            RowBox[{"(", 
             RowBox[{"T", "-", "Y"}], ")"}], " ", "Y"}]}], ")"}], " ", 
         RowBox[{"HeavisideTheta", "[", 
          RowBox[{
           RowBox[{"-", "q"}], "+", "t"}], "]"}]}]}], ")"}]}], ")"}], "/", 
    RowBox[{"(", 
     RowBox[{"a", " ", 
      RowBox[{"(", 
       RowBox[{"a", "+", "b"}], ")"}], " ", "r", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"a", " ", "T"}], "+", 
        RowBox[{"b", " ", 
         RowBox[{"(", 
          RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"T", "-", "Y"}], ")"}]}], ")"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"plot", "[", 
  RowBox[{"f", 
   RowBox[{"{", 
    RowBox[{
    "6.8", ",", " ", "475", ",", " ", "26.6", ",", " ", "0.2", ",", " ", "68",
      ",", " ", "670", ",", " ", "214", ",", " ", "15.6", ",", " ", "t"}], 
    "}"}]}], "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.785929129871619*^9, 3.785929220385621*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"fac77810-9679-42dc-a555-ac0a37d541bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"A", " ", "R", " ", "V", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox["t", "T"]}]], " ", "T"}], "-", 
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox["t", "Y"]}]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
         RowBox[{"b", " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox[
             RowBox[{
              RowBox[{"(", 
               RowBox[{"a", "+", "b"}], ")"}], " ", "t"}], 
             RowBox[{"b", " ", "Y"}]]}]], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "-", 
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox["t", "T"]}]], " ", 
          SuperscriptBox["T", "2"]}], "-", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox["t", "Y"]}]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "+", 
         RowBox[{
          SuperscriptBox["b", "2"], " ", 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox[
             RowBox[{
              RowBox[{"(", 
               RowBox[{"a", "+", "b"}], ")"}], " ", "t"}], 
             RowBox[{"b", " ", "Y"}]]}]], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", "Y"}]}], ")"}]}], "-", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"a", "+", "b"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{"q", "-", "t"}], "T"]], " ", "T"}], "-", 
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{"q", "-", "t"}], "Y"]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}]}], "+", 
         RowBox[{"b", " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{
             RowBox[{"(", 
              RowBox[{"a", "+", "b"}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}]}], 
            RowBox[{"b", " ", "Y"}]]], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y", " ", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{
         RowBox[{"-", "q"}], "+", "t"}], "]"}]}], "+", 
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{"q", "-", "t"}], "T"]], " ", 
          SuperscriptBox["T", "2"]}], "-", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"a", "+", "b"}], ")"}], " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{"q", "-", "t"}], "Y"]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"a", " ", "T"}], "+", 
            RowBox[{"b", " ", 
             RowBox[{"(", 
              RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", "Y"}], "+", 
         RowBox[{
          SuperscriptBox["b", "2"], " ", 
          SuperscriptBox["\[ExponentialE]", 
           FractionBox[
            RowBox[{
             RowBox[{"(", 
              RowBox[{"a", "+", "b"}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"q", "-", "t"}], ")"}]}], 
            RowBox[{"b", " ", "Y"}]]], " ", 
          RowBox[{"(", 
           RowBox[{"T", "-", "Y"}], ")"}], " ", "Y"}]}], ")"}], " ", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{
         RowBox[{"-", "q"}], "+", "t"}], "]"}]}]}], ")"}]}], ")"}], "/", 
  RowBox[{"(", 
   RowBox[{"a", " ", 
    RowBox[{"(", 
     RowBox[{"a", "+", "b"}], ")"}], " ", "r", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"a", " ", "T"}], "+", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{"T", "-", "Y"}], ")"}]}]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"T", "-", "Y"}], ")"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.7859292487637877`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"aebd3975-feaf-45c0-8b95-7059df82742e"],

Cell[BoxData[
 RowBox[{"plot", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"6.8`", " ", "f"}], ",", 
    RowBox[{"475", " ", "f"}], ",", 
    RowBox[{"26.6`", " ", "f"}], ",", 
    RowBox[{"0.2`", " ", "f"}], ",", 
    RowBox[{"68", " ", "f"}], ",", 
    RowBox[{"670", " ", "f"}], ",", 
    RowBox[{"214", " ", "f"}], ",", 
    RowBox[{"15.6`", " ", "f"}], ",", 
    RowBox[{"f", " ", "t"}]}], "}"}], "]"}]], "Output",
 CellChangeTimes->{3.7859292487807026`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"5ae4f3b6-6144-4906-a07d-ffb63e5f6838"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
f[A,R, r, V, a, b, T, Y, t] =
(A R V (b (a+b) (a E^(-(t/T)) T-E^(-(t/Y)) (a T+b (T-Y))+b E^(-(((a+b) t)/(b \
Y))) (T-Y)) Y-a (a (a+b) E^(-(t/T)) T^2-a (a T+b (T-Y)) (T-Y)-(a+b) \
E^(-(t/Y)) (a T+b (T-Y)) Y+b^2 E^(-(((a+b) t)/(b Y))) (T-Y) Y)-b (a+b) (a \
E^((q-t)/T) T-E^((q-t)/Y) (a T+b (T-Y))+b E^(((a+b) (q-t))/(b Y)) (T-Y)) Y \
HeavisideTheta[-q+t]+a (a (a+b) E^((q-t)/T) T^2-a (a T+b (T-Y)) (T-Y)-(a+b) \
E^((q-t)/Y) (a T+b (T-Y)) Y+b^2 E^(((a+b) (q-t))/(b Y)) (T-Y) Y) \
HeavisideTheta[-q+t]))/(a (a+b) r (a T+b (T-Y)) (T-Y))

Plot[f{6.8, 475, 26.6, 0.2, 68, 670, 214, 15.6, t}, {t, 0, 800}]\
\>", "WolframAlphaLong",
 CellChangeTimes->{{3.7859292626396494`*^9, 3.7859293055330324`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"3a3d289f-a7b4-496e-9246-cd6f297faf16"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "f[A,R, r, V, a, b, T, Y, t] =\n(A R V (b (a+b) (a E^(-(t/T)) T-E^(-(t/Y)) \
(a T+b (T-Y))+b E^(-(((a+b) t)/(b Y))) (T-Y)) Y-a (a (a+b) E^(-(t/T)) T^2-a \
(a T+b (T-Y)) (T-Y)-(a+b) E^(-(t/Y)) (a T+b (T-Y)) Y+b^2 E^(-(((a+b) t)/(b \
Y))) (T-Y) Y)-b (a+b) (a E^((q-t)/T) T-E^((q-t)/Y) (a T+b (T-Y))+b E^(((a+b) \
(q-t))/(b Y)) (T-Y)) Y HeavisideTheta[-q+t]+a (a (a+b) E^((q-t)/T) T^2-a (a \
T+b (T-Y)) (T-Y)-(a+b) E^((q-t)/Y) (a T+b (T-Y)) Y+b^2 E^(((a+b) (q-t))/(b \
Y)) (T-Y) Y) HeavisideTheta[-q+t]))/(a (a+b) r (a T+b (T-Y)) (T-Y))\n\n\
Plot[f{6.8, 475, 26.6, 0.2, 68, 670, 214, 15.6, t}, {t, 0, 800}]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["tips", {"count" -> "2"}, {"\n  ", 
      XMLElement[
      "tip", {"text" -> "Avoid concatenation in math expressions"}, {}], 
      "\n  ", 
      XMLElement[
      "tip", {"text" -> 
        "Use r*x rather than rx, and q*x^2 rather than qx2"}, {}], "\n "}]}, 
   Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "false", "error" -> "false", "numpods" -> "0", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "4.166", 
    "parsetiming" -> "0.01", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "", "parseidserver" -> "32", "host" -> 
    "https://www4b.wolframalpha.com", "server" -> "32", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2019, 12, 21, 16, 1, 54.9967025`9.492911492658772}, "Line" -> 
    5, "SessionID" -> 33550843877859390777}, Typeset`showpods$$ = {}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "f[A,R, r, V, a, b, T, Y, t] =\n(A R V (b (a+b) (a E^(-(t/T)) T-E^(-(t/Y)) \
(a T+b (T-Y))+b E^(-(((a+b) t)/(b Y))) (T-Y)) Y-a (a (a+b) E^(-(t/T)) T^2-a \
(a T+b (T-Y)) (T-Y)-(a+b) E^(-(t/Y)) (a T+b (T-Y)) Y+b^2 E^(-(((a+b) t)/(b \
Y))) (T-Y) Y)-b (a+b) (a E^((q-t)/T) T-E^((q-t)/Y) (a T+b (T-Y))+b E^(((a+b) \
(q-t))/(b Y)) (T-Y)) Y HeavisideTheta[-q+t]+a (a (a+b) E^((q-t)/T) T^2-a (a \
T+b (T-Y)) (T-Y)-(a+b) E^((q-t)/Y) (a T+b (T-Y)) Y+b^2 E^(((a+b) (q-t))/(b \
Y)) (T-Y) Y) HeavisideTheta[-q+t]))/(a (a+b) r (a T+b (T-Y)) (T-Y))\n\n\
Plot[f{6.8, 475, 26.6, 0.2, 68, 670, 214, 15.6, t}, {t, 0, 800}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {}, {}, Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, 
        Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{690., {43., 49.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.785929315002651*^9},ExpressionUUID->"c42fdef9-a945-47ec-baf6-\
dceb269fec4b"]
}, Open  ]]
},
WindowSize->{759, 697},
WindowMargins->{{Automatic, 361}, {24, Automatic}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 205, 2, 44, "WolframAlphaLong",ExpressionUUID->"9b6b1c78-70d9-45fd-84df-f1c6c6584119"],
Cell[788, 26, 103028, 1964, 790, "Print",ExpressionUUID->"084b8b2d-b7fd-4c99-9dcc-71fde709efa9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103853, 1995, 1194, 36, 48, "Input",ExpressionUUID->"7c491bd0-08e3-4886-8a13-d1308593b7c6"],
Cell[105050, 2033, 5863, 169, 242, "Output",ExpressionUUID->"28db43fa-98c5-446d-ba1c-919120a7bcfc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[110950, 2207, 162, 3, 28, "Input",ExpressionUUID->"70b4a6da-9131-4a4c-ac59-1de3876cc7c6"],
Cell[111115, 2212, 8296, 238, 388, "Output",ExpressionUUID->"f2799161-0c87-4a49-9551-84acd979f3bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119448, 2455, 16905, 410, 64, "WolframAlphaShortInput",ExpressionUUID->"c5d31147-6682-46a4-89ba-210c3afcc7cc"],
Cell[136356, 2867, 2933, 67, 238, "Output",ExpressionUUID->"45ad566e-521f-4eed-81df-efbfc3c9d90d"]
}, Open  ]],
Cell[139304, 2937, 4645, 99, 272, "WolframAlphaShortInput",ExpressionUUID->"9f8146a1-c355-4aaf-a09e-88b2bbb8f852"],
Cell[143952, 3038, 4606, 99, 272, "WolframAlphaShortInput",ExpressionUUID->"2b509d5d-67c0-4b96-a732-c3555b74baad"],
Cell[CellGroupData[{
Cell[148583, 3141, 12793, 315, 64, "WolframAlphaShortInput",ExpressionUUID->"c43a4d7c-7bc1-4c74-892a-e067fa5e30c9"],
Cell[161379, 3458, 179, 3, 32, "Output",ExpressionUUID->"7c261e9b-c4c7-4f17-8fc2-d2010ed6a9cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161595, 3466, 18158, 436, 64, "WolframAlphaShortInput",ExpressionUUID->"3a6a77ce-2e0d-40cc-b941-2acf3ec39d5a"],
Cell[179756, 3904, 955, 26, 303, "Output",ExpressionUUID->"04362dcd-df5e-4b0f-abd3-4cdf517af4bb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[180748, 3935, 12794, 315, 64, "WolframAlphaShortInput",ExpressionUUID->"53880850-d0e0-4ee8-8ab1-b2d911aca3e7"],
Cell[193545, 4252, 180, 3, 32, "Output",ExpressionUUID->"f5fc09ea-99a0-4ab8-977d-f16285d9c677"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193762, 4260, 115093, 1971, 82, "WolframAlphaShortInput",ExpressionUUID->"a260a2f5-370c-4ddf-b1cf-db09ad7349ff"],
Cell[308858, 6233, 1384, 36, 57, "Output",ExpressionUUID->"aed6a81a-a1a4-4b0a-9512-8b39b0734798"]
}, Open  ]],
Cell[310257, 6272, 4716, 100, 291, "WolframAlphaShortInput",ExpressionUUID->"96072a50-946d-4029-9c08-3839ea69e66d"],
Cell[CellGroupData[{
Cell[314998, 6376, 875, 16, 206, "WolframAlphaLong",ExpressionUUID->"e0b07fc2-31ec-4f67-a4cd-aac2df2ff55e"],
Cell[315876, 6394, 4137, 74, 102, "Print",ExpressionUUID->"98923e5d-b0a5-46ff-a179-a4bb61295def"]
}, Open  ]],
Cell[CellGroupData[{
Cell[320050, 6473, 9022, 234, 371, "Input",ExpressionUUID->"35e67678-4750-46cc-8984-29229bf6d907"],
Cell[329075, 6709, 5864, 169, 242, "Output",ExpressionUUID->"23b54096-d458-466e-bf7c-59afa5db61aa"],
Cell[334942, 6880, 349, 8, 32, "Output",ExpressionUUID->"43f2185e-74cf-40d0-bc18-5fc8abb6cc2a"]
}, Open  ]],
Cell[335306, 6891, 157, 3, 34, "WolframAlphaShort",ExpressionUUID->"71fcbd1d-b128-4cd1-948f-2905d2833f90"],
Cell[335466, 6896, 6816, 201, 174, "WolframAlphaShort",ExpressionUUID->"2d10949b-679c-4cdd-b69b-21408fab359e"],
Cell[342285, 7099, 6804, 201, 200, "Input",ExpressionUUID->"ec2c9de2-ac0b-4fe1-af6d-464adea1bbe2"],
Cell[349092, 7302, 7688, 230, 257, "Input",ExpressionUUID->"7aff58f1-5625-45ad-8242-deb6d6e455c7"],
Cell[356783, 7534, 217, 7, 63, "ExternalLanguage",ExpressionUUID->"f210852a-79e6-4735-ba56-76097c044683"],
Cell[357003, 7543, 144, 3, 34, "Text",ExpressionUUID->"087946c2-b776-421f-b283-37dc9d6edb2d"],
Cell[CellGroupData[{
Cell[357172, 7550, 7773, 215, 295, "Input",ExpressionUUID->"fac77810-9679-42dc-a555-ac0a37d541bb"],
Cell[364948, 7767, 5865, 169, 242, "Output",ExpressionUUID->"aebd3975-feaf-45c0-8b95-7059df82742e"],
Cell[370816, 7938, 543, 14, 32, "Output",ExpressionUUID->"5ae4f3b6-6144-4906-a07d-ffb63e5f6838"]
}, Open  ]],
Cell[CellGroupData[{
Cell[371396, 7957, 781, 13, 142, "WolframAlphaLong",ExpressionUUID->"3a3d289f-a7b4-496e-9246-cd6f297faf16"],
Cell[372180, 7972, 3852, 70, 102, "Print",ExpressionUUID->"c42fdef9-a945-47ec-baf6-dceb269fec4b"]
}, Open  ]]
}
]
*)

